// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/device/v1/service.proto" (package "dipstick.device.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DeviceService } from "./service";
import type { DeviceEventsResponse } from "./service";
import type { DeviceEventsRequest } from "./service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { CallActionResponse } from "./service";
import type { CallActionRequest } from "./service";
import type { GetDeviceResponse } from "./service";
import type { GetDeviceRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateDeviceResponse } from "./service";
import type { CreateDeviceRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service dipstick.device.v1.DeviceService
 */
export interface IDeviceServiceClient {
  /**
   * @generated from protobuf rpc: CreateDevice(dipstick.device.v1.CreateDeviceRequest) returns (dipstick.device.v1.CreateDeviceResponse);
   */
  createDevice(
    input: CreateDeviceRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateDeviceRequest, CreateDeviceResponse>;
  /**
   * @generated from protobuf rpc: GetDevice(dipstick.device.v1.GetDeviceRequest) returns (dipstick.device.v1.GetDeviceResponse);
   */
  getDevice(
    input: GetDeviceRequest,
    options?: RpcOptions,
  ): UnaryCall<GetDeviceRequest, GetDeviceResponse>;
  /**
   * @generated from protobuf rpc: CallAction(dipstick.device.v1.CallActionRequest) returns (dipstick.device.v1.CallActionResponse);
   */
  callAction(
    input: CallActionRequest,
    options?: RpcOptions,
  ): UnaryCall<CallActionRequest, CallActionResponse>;
  /**
   * @generated from protobuf rpc: DeviceEvents(dipstick.device.v1.DeviceEventsRequest) returns (stream dipstick.device.v1.DeviceEventsResponse);
   */
  deviceEvents(
    input: DeviceEventsRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<DeviceEventsRequest, DeviceEventsResponse>;
}
/**
 * @generated from protobuf service dipstick.device.v1.DeviceService
 */
export class DeviceServiceClient implements IDeviceServiceClient, ServiceInfo {
  typeName = DeviceService.typeName;
  methods = DeviceService.methods;
  options = DeviceService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: CreateDevice(dipstick.device.v1.CreateDeviceRequest) returns (dipstick.device.v1.CreateDeviceResponse);
   */
  createDevice(
    input: CreateDeviceRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateDeviceRequest, CreateDeviceResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateDeviceRequest, CreateDeviceResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetDevice(dipstick.device.v1.GetDeviceRequest) returns (dipstick.device.v1.GetDeviceResponse);
   */
  getDevice(
    input: GetDeviceRequest,
    options?: RpcOptions,
  ): UnaryCall<GetDeviceRequest, GetDeviceResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetDeviceRequest, GetDeviceResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: CallAction(dipstick.device.v1.CallActionRequest) returns (dipstick.device.v1.CallActionResponse);
   */
  callAction(
    input: CallActionRequest,
    options?: RpcOptions,
  ): UnaryCall<CallActionRequest, CallActionResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CallActionRequest, CallActionResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: DeviceEvents(dipstick.device.v1.DeviceEventsRequest) returns (stream dipstick.device.v1.DeviceEventsResponse);
   */
  deviceEvents(
    input: DeviceEventsRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<DeviceEventsRequest, DeviceEventsResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<DeviceEventsRequest, DeviceEventsResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input,
    );
  }
}
