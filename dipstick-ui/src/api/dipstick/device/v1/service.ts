// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/device/v1/service.proto" (package "dipstick.device.v1", syntax proto3)
// tslint:disable
import { EntitySelector } from "../../core/v1/entity";
import { EntityMetaSpec } from "../../core/v1/entity";
import { DeviceEvent } from "./device";
import { DeviceEntity } from "./device";
import { DeviceSpec } from "./device";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceType } from "@protobuf-ts/runtime-rpc";

/**
 * @generated from protobuf message dipstick.device.v1.CreateDeviceRequest
 */
export interface CreateDeviceRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMetaSpec meta = 1;
   */
  meta?: EntityMetaSpec;
  /**
   * @generated from protobuf field: dipstick.device.v1.DeviceSpec spec = 2;
   */
  spec?: DeviceSpec;
}
/**
 * @generated from protobuf message dipstick.device.v1.CreateDeviceResponse
 */
export interface CreateDeviceResponse {
  /**
   * @generated from protobuf field: dipstick.device.v1.DeviceEntity device = 1;
   */
  device?: DeviceEntity;
}
/**
 * @generated from protobuf message dipstick.device.v1.GetDeviceRequest
 */
export interface GetDeviceRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.device.v1.GetDeviceResponse
 */
export interface GetDeviceResponse {
  /**
   * @generated from protobuf field: dipstick.device.v1.DeviceEntity device = 1;
   */
  device?: DeviceEntity;
}
/**
 * @generated from protobuf message dipstick.device.v1.CallActionRequest
 */
export interface CallActionRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
  /**
   * @generated from protobuf field: string action = 2;
   */
  action: string;
}
/**
 * @generated from protobuf message dipstick.device.v1.CallActionResponse
 */
export interface CallActionResponse {}
/**
 * @generated from protobuf message dipstick.device.v1.DeviceEventsRequest
 */
export interface DeviceEventsRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.device.v1.DeviceEventsResponse
 */
export interface DeviceEventsResponse {
  /**
   * @generated from protobuf field: dipstick.device.v1.DeviceEvent event = 1;
   */
  event?: DeviceEvent;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeviceRequest$Type extends MessageType<CreateDeviceRequest> {
  constructor() {
    super("dipstick.device.v1.CreateDeviceRequest", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMetaSpec },
      { no: 2, name: "spec", kind: "message", T: () => DeviceSpec },
    ]);
  }
  create(value?: PartialMessage<CreateDeviceRequest>): CreateDeviceRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateDeviceRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateDeviceRequest,
  ): CreateDeviceRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMetaSpec meta */ 1:
          message.meta = EntityMetaSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.device.v1.DeviceSpec spec */ 2:
          message.spec = DeviceSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateDeviceRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMetaSpec meta = 1; */
    if (message.meta)
      EntityMetaSpec.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.device.v1.DeviceSpec spec = 2; */
    if (message.spec)
      DeviceSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.device.v1.CreateDeviceRequest
 */
export const CreateDeviceRequest = new CreateDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeviceResponse$Type extends MessageType<CreateDeviceResponse> {
  constructor() {
    super("dipstick.device.v1.CreateDeviceResponse", [
      { no: 1, name: "device", kind: "message", T: () => DeviceEntity },
    ]);
  }
  create(value?: PartialMessage<CreateDeviceResponse>): CreateDeviceResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateDeviceResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateDeviceResponse,
  ): CreateDeviceResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.device.v1.DeviceEntity device */ 1:
          message.device = DeviceEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.device,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateDeviceResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.device.v1.DeviceEntity device = 1; */
    if (message.device)
      DeviceEntity.internalBinaryWrite(
        message.device,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.device.v1.CreateDeviceResponse
 */
export const CreateDeviceResponse = new CreateDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDeviceRequest$Type extends MessageType<GetDeviceRequest> {
  constructor() {
    super("dipstick.device.v1.GetDeviceRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<GetDeviceRequest>): GetDeviceRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetDeviceRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDeviceRequest,
  ): GetDeviceRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDeviceRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.device.v1.GetDeviceRequest
 */
export const GetDeviceRequest = new GetDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDeviceResponse$Type extends MessageType<GetDeviceResponse> {
  constructor() {
    super("dipstick.device.v1.GetDeviceResponse", [
      { no: 1, name: "device", kind: "message", T: () => DeviceEntity },
    ]);
  }
  create(value?: PartialMessage<GetDeviceResponse>): GetDeviceResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetDeviceResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDeviceResponse,
  ): GetDeviceResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.device.v1.DeviceEntity device */ 1:
          message.device = DeviceEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.device,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDeviceResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.device.v1.DeviceEntity device = 1; */
    if (message.device)
      DeviceEntity.internalBinaryWrite(
        message.device,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.device.v1.GetDeviceResponse
 */
export const GetDeviceResponse = new GetDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallActionRequest$Type extends MessageType<CallActionRequest> {
  constructor() {
    super("dipstick.device.v1.CallActionRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
      { no: 2, name: "action", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
    ]);
  }
  create(value?: PartialMessage<CallActionRequest>): CallActionRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.action = "";
    if (value !== undefined)
      reflectionMergePartial<CallActionRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CallActionRequest,
  ): CallActionRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        case /* string action */ 2:
          message.action = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CallActionRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* string action = 2; */
    if (message.action !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.action);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.device.v1.CallActionRequest
 */
export const CallActionRequest = new CallActionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CallActionResponse$Type extends MessageType<CallActionResponse> {
  constructor() {
    super("dipstick.device.v1.CallActionResponse", []);
  }
  create(value?: PartialMessage<CallActionResponse>): CallActionResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CallActionResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CallActionResponse,
  ): CallActionResponse {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: CallActionResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.device.v1.CallActionResponse
 */
export const CallActionResponse = new CallActionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceEventsRequest$Type extends MessageType<DeviceEventsRequest> {
  constructor() {
    super("dipstick.device.v1.DeviceEventsRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<DeviceEventsRequest>): DeviceEventsRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<DeviceEventsRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeviceEventsRequest,
  ): DeviceEventsRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DeviceEventsRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.device.v1.DeviceEventsRequest
 */
export const DeviceEventsRequest = new DeviceEventsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceEventsResponse$Type extends MessageType<DeviceEventsResponse> {
  constructor() {
    super("dipstick.device.v1.DeviceEventsResponse", [
      { no: 1, name: "event", kind: "message", T: () => DeviceEvent },
    ]);
  }
  create(value?: PartialMessage<DeviceEventsResponse>): DeviceEventsResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<DeviceEventsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeviceEventsResponse,
  ): DeviceEventsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.device.v1.DeviceEvent event */ 1:
          message.event = DeviceEvent.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.event,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DeviceEventsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.device.v1.DeviceEvent event = 1; */
    if (message.event)
      DeviceEvent.internalBinaryWrite(
        message.event,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.device.v1.DeviceEventsResponse
 */
export const DeviceEventsResponse = new DeviceEventsResponse$Type();
/**
 * @generated ServiceType for protobuf service dipstick.device.v1.DeviceService
 */
export const DeviceService = new ServiceType(
  "dipstick.device.v1.DeviceService",
  [
    {
      name: "CreateDevice",
      options: {},
      I: CreateDeviceRequest,
      O: CreateDeviceResponse,
    },
    {
      name: "GetDevice",
      options: {},
      I: GetDeviceRequest,
      O: GetDeviceResponse,
    },
    {
      name: "CallAction",
      options: {},
      I: CallActionRequest,
      O: CallActionResponse,
    },
    {
      name: "DeviceEvents",
      serverStreaming: true,
      options: {},
      I: DeviceEventsRequest,
      O: DeviceEventsResponse,
    },
  ],
);
