// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/can/v1/bus.proto" (package "dipstick.can.v1", syntax proto3)
// tslint:disable
import { EntityMeta } from "../../core/v1/entity";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";

/**
 * @generated from protobuf message dipstick.can.v1.BusEntity
 */
export interface BusEntity {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMeta meta = 1;
   */
  meta?: EntityMeta;
  /**
   * @generated from protobuf field: dipstick.can.v1.BusSpec spec = 2;
   */
  spec?: BusSpec;
  /**
   * @generated from protobuf field: dipstick.can.v1.BusStatus status = 3;
   */
  status?: BusStatus;
}
/**
 * @generated from protobuf message dipstick.can.v1.BusSpec
 */
export interface BusSpec {
  /**
   * @generated from protobuf oneof: bus_spec_variant
   */
  busSpecVariant:
    | {
        oneofKind: "linux";
        /**
         * @generated from protobuf field: dipstick.can.v1.LinuxBusSpec linux = 2;
         */
        linux: LinuxBusSpec;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message dipstick.can.v1.LinuxBusSpec
 */
export interface LinuxBusSpec {
  /**
   * @generated from protobuf field: string device = 1;
   */
  device: string;
  /**
   * @generated from protobuf field: optional uint32 bitrate = 2;
   */
  bitrate?: number;
}
/**
 * @generated from protobuf message dipstick.can.v1.BusStatus
 */
export interface BusStatus {}
// @generated message type with reflection information, may provide speed optimized methods
class BusEntity$Type extends MessageType<BusEntity> {
  constructor() {
    super("dipstick.can.v1.BusEntity", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMeta },
      { no: 2, name: "spec", kind: "message", T: () => BusSpec },
      { no: 3, name: "status", kind: "message", T: () => BusStatus },
    ]);
  }
  create(value?: PartialMessage<BusEntity>): BusEntity {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<BusEntity>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: BusEntity,
  ): BusEntity {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMeta meta */ 1:
          message.meta = EntityMeta.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.can.v1.BusSpec spec */ 2:
          message.spec = BusSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        case /* dipstick.can.v1.BusStatus status */ 3:
          message.status = BusStatus.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.status,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: BusEntity,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMeta meta = 1; */
    if (message.meta)
      EntityMeta.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.can.v1.BusSpec spec = 2; */
    if (message.spec)
      BusSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.can.v1.BusStatus status = 3; */
    if (message.status)
      BusStatus.internalBinaryWrite(
        message.status,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.can.v1.BusEntity
 */
export const BusEntity = new BusEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BusSpec$Type extends MessageType<BusSpec> {
  constructor() {
    super("dipstick.can.v1.BusSpec", [
      {
        no: 2,
        name: "linux",
        kind: "message",
        oneof: "busSpecVariant",
        T: () => LinuxBusSpec,
      },
    ]);
  }
  create(value?: PartialMessage<BusSpec>): BusSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.busSpecVariant = { oneofKind: undefined };
    if (value !== undefined)
      reflectionMergePartial<BusSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: BusSpec,
  ): BusSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.can.v1.LinuxBusSpec linux */ 2:
          message.busSpecVariant = {
            oneofKind: "linux",
            linux: LinuxBusSpec.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.busSpecVariant as any).linux,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: BusSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.can.v1.LinuxBusSpec linux = 2; */
    if (message.busSpecVariant.oneofKind === "linux")
      LinuxBusSpec.internalBinaryWrite(
        message.busSpecVariant.linux,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.can.v1.BusSpec
 */
export const BusSpec = new BusSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinuxBusSpec$Type extends MessageType<LinuxBusSpec> {
  constructor() {
    super("dipstick.can.v1.LinuxBusSpec", [
      { no: 1, name: "device", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "bitrate",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<LinuxBusSpec>): LinuxBusSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.device = "";
    if (value !== undefined)
      reflectionMergePartial<LinuxBusSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: LinuxBusSpec,
  ): LinuxBusSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string device */ 1:
          message.device = reader.string();
          break;
        case /* optional uint32 bitrate */ 2:
          message.bitrate = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: LinuxBusSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string device = 1; */
    if (message.device !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.device);
    /* optional uint32 bitrate = 2; */
    if (message.bitrate !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.bitrate);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.can.v1.LinuxBusSpec
 */
export const LinuxBusSpec = new LinuxBusSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BusStatus$Type extends MessageType<BusStatus> {
  constructor() {
    super("dipstick.can.v1.BusStatus", []);
  }
  create(value?: PartialMessage<BusStatus>): BusStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<BusStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: BusStatus,
  ): BusStatus {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: BusStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.can.v1.BusStatus
 */
export const BusStatus = new BusStatus$Type();
