// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/can/v1/service.proto" (package "dipstick.can.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CanService } from "./service";
import type { ReceiveFramesResponse } from "./service";
import type { ReceiveFramesRequest } from "./service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SendFrameResponse } from "./service";
import type { SendFrameRequest } from "./service";
import type { GetBusResponse } from "./service";
import type { GetBusRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateBusResponse } from "./service";
import type { CreateBusRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service dipstick.can.v1.CanService
 */
export interface ICanServiceClient {
  /**
   * @generated from protobuf rpc: CreateBus(dipstick.can.v1.CreateBusRequest) returns (dipstick.can.v1.CreateBusResponse);
   */
  createBus(
    input: CreateBusRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateBusRequest, CreateBusResponse>;
  /**
   * @generated from protobuf rpc: GetBus(dipstick.can.v1.GetBusRequest) returns (dipstick.can.v1.GetBusResponse);
   */
  getBus(
    input: GetBusRequest,
    options?: RpcOptions,
  ): UnaryCall<GetBusRequest, GetBusResponse>;
  /**
   * @generated from protobuf rpc: SendFrame(dipstick.can.v1.SendFrameRequest) returns (dipstick.can.v1.SendFrameResponse);
   */
  sendFrame(
    input: SendFrameRequest,
    options?: RpcOptions,
  ): UnaryCall<SendFrameRequest, SendFrameResponse>;
  /**
   * @generated from protobuf rpc: ReceiveFrames(dipstick.can.v1.ReceiveFramesRequest) returns (stream dipstick.can.v1.ReceiveFramesResponse);
   */
  receiveFrames(
    input: ReceiveFramesRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<ReceiveFramesRequest, ReceiveFramesResponse>;
}
/**
 * @generated from protobuf service dipstick.can.v1.CanService
 */
export class CanServiceClient implements ICanServiceClient, ServiceInfo {
  typeName = CanService.typeName;
  methods = CanService.methods;
  options = CanService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: CreateBus(dipstick.can.v1.CreateBusRequest) returns (dipstick.can.v1.CreateBusResponse);
   */
  createBus(
    input: CreateBusRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateBusRequest, CreateBusResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateBusRequest, CreateBusResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetBus(dipstick.can.v1.GetBusRequest) returns (dipstick.can.v1.GetBusResponse);
   */
  getBus(
    input: GetBusRequest,
    options?: RpcOptions,
  ): UnaryCall<GetBusRequest, GetBusResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetBusRequest, GetBusResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: SendFrame(dipstick.can.v1.SendFrameRequest) returns (dipstick.can.v1.SendFrameResponse);
   */
  sendFrame(
    input: SendFrameRequest,
    options?: RpcOptions,
  ): UnaryCall<SendFrameRequest, SendFrameResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<SendFrameRequest, SendFrameResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: ReceiveFrames(dipstick.can.v1.ReceiveFramesRequest) returns (stream dipstick.can.v1.ReceiveFramesResponse);
   */
  receiveFrames(
    input: ReceiveFramesRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<ReceiveFramesRequest, ReceiveFramesResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ReceiveFramesRequest, ReceiveFramesResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input,
    );
  }
}
