// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/spi/v1/device.proto" (package "dipstick.spi.v1", syntax proto3)
// tslint:disable
import { EntityMeta } from "../../core/v1/entity";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";

/**
 * @generated from protobuf message dipstick.spi.v1.DeviceEntity
 */
export interface DeviceEntity {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMeta meta = 1;
   */
  meta?: EntityMeta;
  /**
   * @generated from protobuf field: dipstick.spi.v1.DeviceSpec spec = 2;
   */
  spec?: DeviceSpec;
  /**
   * @generated from protobuf field: dipstick.spi.v1.DeviceStatus status = 3;
   */
  status?: DeviceStatus;
}
/**
 * @generated from protobuf message dipstick.spi.v1.DeviceSpec
 */
export interface DeviceSpec {
  /**
   * @generated from protobuf field: optional uint32 bits_per_word = 1;
   */
  bitsPerWord?: number;
  /**
   * @generated from protobuf field: optional uint32 max_speed_hz = 3;
   */
  maxSpeedHz?: number;
  /**
   * @generated from protobuf field: optional bool lsb_first = 4;
   */
  lsbFirst?: boolean;
  /**
   * @generated from protobuf field: dipstick.spi.v1.SpiMode mode = 5;
   */
  mode: SpiMode;
  /**
   * @generated from protobuf oneof: device_spec_variant
   */
  deviceSpecVariant:
    | {
        oneofKind: "linux";
        /**
         * @generated from protobuf field: dipstick.spi.v1.LinuxDeviceSpec linux = 2;
         */
        linux: LinuxDeviceSpec;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message dipstick.spi.v1.LinuxDeviceSpec
 */
export interface LinuxDeviceSpec {
  /**
   * @generated from protobuf field: optional uint32 bus = 1;
   */
  bus?: number;
  /**
   * @generated from protobuf field: optional uint32 chipselect = 2;
   */
  chipselect?: number;
}
/**
 * @generated from protobuf message dipstick.spi.v1.DeviceStatus
 */
export interface DeviceStatus {}
/**
 * @generated from protobuf enum dipstick.spi.v1.SpiMode
 */
export enum SpiMode {
  /**
   * @generated from protobuf enum value: SPI_MODE_UNSPECIFIED = 0;
   */
  SPI_MODE_UNSPECIFIED = 0,
  /**
   * @generated from protobuf enum value: SPI_MODE_0 = 1;
   */
  SPI_MODE_0 = 1,
  /**
   * @generated from protobuf enum value: SPI_MODE_1 = 2;
   */
  SPI_MODE_1 = 2,
  /**
   * @generated from protobuf enum value: SPI_MODE_2 = 3;
   */
  SPI_MODE_2 = 3,
  /**
   * @generated from protobuf enum value: SPI_MODE_3 = 4;
   */
  SPI_MODE_3 = 4,
}
// @generated message type with reflection information, may provide speed optimized methods
class DeviceEntity$Type extends MessageType<DeviceEntity> {
  constructor() {
    super("dipstick.spi.v1.DeviceEntity", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMeta },
      { no: 2, name: "spec", kind: "message", T: () => DeviceSpec },
      { no: 3, name: "status", kind: "message", T: () => DeviceStatus },
    ]);
  }
  create(value?: PartialMessage<DeviceEntity>): DeviceEntity {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<DeviceEntity>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeviceEntity,
  ): DeviceEntity {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMeta meta */ 1:
          message.meta = EntityMeta.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.spi.v1.DeviceSpec spec */ 2:
          message.spec = DeviceSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        case /* dipstick.spi.v1.DeviceStatus status */ 3:
          message.status = DeviceStatus.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.status,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DeviceEntity,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMeta meta = 1; */
    if (message.meta)
      EntityMeta.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.spi.v1.DeviceSpec spec = 2; */
    if (message.spec)
      DeviceSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.spi.v1.DeviceStatus status = 3; */
    if (message.status)
      DeviceStatus.internalBinaryWrite(
        message.status,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.DeviceEntity
 */
export const DeviceEntity = new DeviceEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceSpec$Type extends MessageType<DeviceSpec> {
  constructor() {
    super("dipstick.spi.v1.DeviceSpec", [
      {
        no: 1,
        name: "bits_per_word",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 3,
        name: "max_speed_hz",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 4,
        name: "lsb_first",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 5,
        name: "mode",
        kind: "enum",
        T: () => ["dipstick.spi.v1.SpiMode", SpiMode],
      },
      {
        no: 2,
        name: "linux",
        kind: "message",
        oneof: "deviceSpecVariant",
        T: () => LinuxDeviceSpec,
      },
    ]);
  }
  create(value?: PartialMessage<DeviceSpec>): DeviceSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.mode = 0;
    message.deviceSpecVariant = { oneofKind: undefined };
    if (value !== undefined)
      reflectionMergePartial<DeviceSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeviceSpec,
  ): DeviceSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 bits_per_word */ 1:
          message.bitsPerWord = reader.uint32();
          break;
        case /* optional uint32 max_speed_hz */ 3:
          message.maxSpeedHz = reader.uint32();
          break;
        case /* optional bool lsb_first */ 4:
          message.lsbFirst = reader.bool();
          break;
        case /* dipstick.spi.v1.SpiMode mode */ 5:
          message.mode = reader.int32();
          break;
        case /* dipstick.spi.v1.LinuxDeviceSpec linux */ 2:
          message.deviceSpecVariant = {
            oneofKind: "linux",
            linux: LinuxDeviceSpec.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.deviceSpecVariant as any).linux,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: DeviceSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 bits_per_word = 1; */
    if (message.bitsPerWord !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.bitsPerWord);
    /* optional uint32 max_speed_hz = 3; */
    if (message.maxSpeedHz !== undefined)
      writer.tag(3, WireType.Varint).uint32(message.maxSpeedHz);
    /* optional bool lsb_first = 4; */
    if (message.lsbFirst !== undefined)
      writer.tag(4, WireType.Varint).bool(message.lsbFirst);
    /* dipstick.spi.v1.SpiMode mode = 5; */
    if (message.mode !== 0) writer.tag(5, WireType.Varint).int32(message.mode);
    /* dipstick.spi.v1.LinuxDeviceSpec linux = 2; */
    if (message.deviceSpecVariant.oneofKind === "linux")
      LinuxDeviceSpec.internalBinaryWrite(
        message.deviceSpecVariant.linux,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.DeviceSpec
 */
export const DeviceSpec = new DeviceSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LinuxDeviceSpec$Type extends MessageType<LinuxDeviceSpec> {
  constructor() {
    super("dipstick.spi.v1.LinuxDeviceSpec", [
      {
        no: 1,
        name: "bus",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "chipselect",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<LinuxDeviceSpec>): LinuxDeviceSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<LinuxDeviceSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: LinuxDeviceSpec,
  ): LinuxDeviceSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional uint32 bus */ 1:
          message.bus = reader.uint32();
          break;
        case /* optional uint32 chipselect */ 2:
          message.chipselect = reader.uint32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: LinuxDeviceSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional uint32 bus = 1; */
    if (message.bus !== undefined)
      writer.tag(1, WireType.Varint).uint32(message.bus);
    /* optional uint32 chipselect = 2; */
    if (message.chipselect !== undefined)
      writer.tag(2, WireType.Varint).uint32(message.chipselect);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.LinuxDeviceSpec
 */
export const LinuxDeviceSpec = new LinuxDeviceSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeviceStatus$Type extends MessageType<DeviceStatus> {
  constructor() {
    super("dipstick.spi.v1.DeviceStatus", []);
  }
  create(value?: PartialMessage<DeviceStatus>): DeviceStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<DeviceStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: DeviceStatus,
  ): DeviceStatus {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: DeviceStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.DeviceStatus
 */
export const DeviceStatus = new DeviceStatus$Type();
