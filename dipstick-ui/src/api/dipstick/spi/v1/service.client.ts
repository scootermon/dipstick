// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/spi/v1/service.proto" (package "dipstick.spi.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SpiService } from "./service";
import type { TransferResponse } from "./service";
import type { TransferRequest } from "./service";
import type { GetDeviceResponse } from "./service";
import type { GetDeviceRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateDeviceResponse } from "./service";
import type { CreateDeviceRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service dipstick.spi.v1.SpiService
 */
export interface ISpiServiceClient {
  /**
   * @generated from protobuf rpc: CreateDevice(dipstick.spi.v1.CreateDeviceRequest) returns (dipstick.spi.v1.CreateDeviceResponse);
   */
  createDevice(
    input: CreateDeviceRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateDeviceRequest, CreateDeviceResponse>;
  /**
   * @generated from protobuf rpc: GetDevice(dipstick.spi.v1.GetDeviceRequest) returns (dipstick.spi.v1.GetDeviceResponse);
   */
  getDevice(
    input: GetDeviceRequest,
    options?: RpcOptions,
  ): UnaryCall<GetDeviceRequest, GetDeviceResponse>;
  /**
   * @generated from protobuf rpc: Transfer(dipstick.spi.v1.TransferRequest) returns (dipstick.spi.v1.TransferResponse);
   */
  transfer(
    input: TransferRequest,
    options?: RpcOptions,
  ): UnaryCall<TransferRequest, TransferResponse>;
}
/**
 * @generated from protobuf service dipstick.spi.v1.SpiService
 */
export class SpiServiceClient implements ISpiServiceClient, ServiceInfo {
  typeName = SpiService.typeName;
  methods = SpiService.methods;
  options = SpiService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: CreateDevice(dipstick.spi.v1.CreateDeviceRequest) returns (dipstick.spi.v1.CreateDeviceResponse);
   */
  createDevice(
    input: CreateDeviceRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateDeviceRequest, CreateDeviceResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateDeviceRequest, CreateDeviceResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetDevice(dipstick.spi.v1.GetDeviceRequest) returns (dipstick.spi.v1.GetDeviceResponse);
   */
  getDevice(
    input: GetDeviceRequest,
    options?: RpcOptions,
  ): UnaryCall<GetDeviceRequest, GetDeviceResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetDeviceRequest, GetDeviceResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: Transfer(dipstick.spi.v1.TransferRequest) returns (dipstick.spi.v1.TransferResponse);
   */
  transfer(
    input: TransferRequest,
    options?: RpcOptions,
  ): UnaryCall<TransferRequest, TransferResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<TransferRequest, TransferResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
}
