// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/spi/v1/service.proto" (package "dipstick.spi.v1", syntax proto3)
// tslint:disable
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { EntitySelector } from "../../core/v1/entity";
import { EntityMetaSpec } from "../../core/v1/entity";
import { DeviceEntity } from "./device";
import { DeviceSpec } from "./device";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceType } from "@protobuf-ts/runtime-rpc";

/**
 * @generated from protobuf message dipstick.spi.v1.CreateDeviceRequest
 */
export interface CreateDeviceRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMetaSpec meta = 1;
   */
  meta?: EntityMetaSpec;
  /**
   * @generated from protobuf field: dipstick.spi.v1.DeviceSpec spec = 2;
   */
  spec?: DeviceSpec;
}
/**
 * @generated from protobuf message dipstick.spi.v1.CreateDeviceResponse
 */
export interface CreateDeviceResponse {
  /**
   * @generated from protobuf field: dipstick.spi.v1.DeviceEntity device = 2;
   */
  device?: DeviceEntity;
}
/**
 * @generated from protobuf message dipstick.spi.v1.GetDeviceRequest
 */
export interface GetDeviceRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.spi.v1.GetDeviceResponse
 */
export interface GetDeviceResponse {
  /**
   * @generated from protobuf field: dipstick.spi.v1.DeviceEntity device = 2;
   */
  device?: DeviceEntity;
}
/**
 * @generated from protobuf message dipstick.spi.v1.TransferRequest
 */
export interface TransferRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
  /**
   * @generated from protobuf field: bytes data = 2;
   */
  data: Uint8Array;
}
/**
 * @generated from protobuf message dipstick.spi.v1.TransferResponse
 */
export interface TransferResponse {
  /**
   * @generated from protobuf field: bytes data = 2;
   */
  data: Uint8Array;
}
/**
 * @generated from protobuf message dipstick.spi.v1.TransfersRequest
 */
export interface TransfersRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.spi.v1.TransfersResponse
 */
export interface TransfersResponse {
  /**
   * @generated from protobuf field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;
  /**
   * @generated from protobuf field: google.protobuf.Duration duration = 4;
   */
  duration?: Duration;
  /**
   * @generated from protobuf field: bytes rx = 2;
   */
  rx: Uint8Array;
  /**
   * @generated from protobuf field: bytes tx = 3;
   */
  tx: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeviceRequest$Type extends MessageType<CreateDeviceRequest> {
  constructor() {
    super("dipstick.spi.v1.CreateDeviceRequest", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMetaSpec },
      { no: 2, name: "spec", kind: "message", T: () => DeviceSpec },
    ]);
  }
  create(value?: PartialMessage<CreateDeviceRequest>): CreateDeviceRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateDeviceRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateDeviceRequest,
  ): CreateDeviceRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMetaSpec meta */ 1:
          message.meta = EntityMetaSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.spi.v1.DeviceSpec spec */ 2:
          message.spec = DeviceSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateDeviceRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMetaSpec meta = 1; */
    if (message.meta)
      EntityMetaSpec.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.spi.v1.DeviceSpec spec = 2; */
    if (message.spec)
      DeviceSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.CreateDeviceRequest
 */
export const CreateDeviceRequest = new CreateDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeviceResponse$Type extends MessageType<CreateDeviceResponse> {
  constructor() {
    super("dipstick.spi.v1.CreateDeviceResponse", [
      { no: 2, name: "device", kind: "message", T: () => DeviceEntity },
    ]);
  }
  create(value?: PartialMessage<CreateDeviceResponse>): CreateDeviceResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateDeviceResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateDeviceResponse,
  ): CreateDeviceResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.spi.v1.DeviceEntity device */ 2:
          message.device = DeviceEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.device,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateDeviceResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.spi.v1.DeviceEntity device = 2; */
    if (message.device)
      DeviceEntity.internalBinaryWrite(
        message.device,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.CreateDeviceResponse
 */
export const CreateDeviceResponse = new CreateDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDeviceRequest$Type extends MessageType<GetDeviceRequest> {
  constructor() {
    super("dipstick.spi.v1.GetDeviceRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<GetDeviceRequest>): GetDeviceRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetDeviceRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDeviceRequest,
  ): GetDeviceRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDeviceRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.GetDeviceRequest
 */
export const GetDeviceRequest = new GetDeviceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDeviceResponse$Type extends MessageType<GetDeviceResponse> {
  constructor() {
    super("dipstick.spi.v1.GetDeviceResponse", [
      { no: 2, name: "device", kind: "message", T: () => DeviceEntity },
    ]);
  }
  create(value?: PartialMessage<GetDeviceResponse>): GetDeviceResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetDeviceResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetDeviceResponse,
  ): GetDeviceResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.spi.v1.DeviceEntity device */ 2:
          message.device = DeviceEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.device,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetDeviceResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.spi.v1.DeviceEntity device = 2; */
    if (message.device)
      DeviceEntity.internalBinaryWrite(
        message.device,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.GetDeviceResponse
 */
export const GetDeviceResponse = new GetDeviceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferRequest$Type extends MessageType<TransferRequest> {
  constructor() {
    super("dipstick.spi.v1.TransferRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
      { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<TransferRequest>): TransferRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.data = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<TransferRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: TransferRequest,
  ): TransferRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        case /* bytes data */ 2:
          message.data = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: TransferRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* bytes data = 2; */
    if (message.data.length)
      writer.tag(2, WireType.LengthDelimited).bytes(message.data);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.TransferRequest
 */
export const TransferRequest = new TransferRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferResponse$Type extends MessageType<TransferResponse> {
  constructor() {
    super("dipstick.spi.v1.TransferResponse", [
      { no: 2, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<TransferResponse>): TransferResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.data = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<TransferResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: TransferResponse,
  ): TransferResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* bytes data */ 2:
          message.data = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: TransferResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* bytes data = 2; */
    if (message.data.length)
      writer.tag(2, WireType.LengthDelimited).bytes(message.data);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.TransferResponse
 */
export const TransferResponse = new TransferResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransfersRequest$Type extends MessageType<TransfersRequest> {
  constructor() {
    super("dipstick.spi.v1.TransfersRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<TransfersRequest>): TransfersRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<TransfersRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: TransfersRequest,
  ): TransfersRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: TransfersRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.TransfersRequest
 */
export const TransfersRequest = new TransfersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransfersResponse$Type extends MessageType<TransfersResponse> {
  constructor() {
    super("dipstick.spi.v1.TransfersResponse", [
      { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
      { no: 4, name: "duration", kind: "message", T: () => Duration },
      { no: 2, name: "rx", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
      { no: 3, name: "tx", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
    ]);
  }
  create(value?: PartialMessage<TransfersResponse>): TransfersResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.rx = new Uint8Array(0);
    message.tx = new Uint8Array(0);
    if (value !== undefined)
      reflectionMergePartial<TransfersResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: TransfersResponse,
  ): TransfersResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* google.protobuf.Timestamp timestamp */ 1:
          message.timestamp = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.timestamp,
          );
          break;
        case /* google.protobuf.Duration duration */ 4:
          message.duration = Duration.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.duration,
          );
          break;
        case /* bytes rx */ 2:
          message.rx = reader.bytes();
          break;
        case /* bytes tx */ 3:
          message.tx = reader.bytes();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: TransfersResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* google.protobuf.Timestamp timestamp = 1; */
    if (message.timestamp)
      Timestamp.internalBinaryWrite(
        message.timestamp,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* google.protobuf.Duration duration = 4; */
    if (message.duration)
      Duration.internalBinaryWrite(
        message.duration,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* bytes rx = 2; */
    if (message.rx.length)
      writer.tag(2, WireType.LengthDelimited).bytes(message.rx);
    /* bytes tx = 3; */
    if (message.tx.length)
      writer.tag(3, WireType.LengthDelimited).bytes(message.tx);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.spi.v1.TransfersResponse
 */
export const TransfersResponse = new TransfersResponse$Type();
/**
 * @generated ServiceType for protobuf service dipstick.spi.v1.SpiService
 */
export const SpiService = new ServiceType("dipstick.spi.v1.SpiService", [
  {
    name: "CreateDevice",
    options: {},
    I: CreateDeviceRequest,
    O: CreateDeviceResponse,
  },
  { name: "GetDevice", options: {}, I: GetDeviceRequest, O: GetDeviceResponse },
  { name: "Transfer", options: {}, I: TransferRequest, O: TransferResponse },
  {
    name: "Transfers",
    serverStreaming: true,
    options: {},
    I: TransfersRequest,
    O: TransfersResponse,
  },
]);
