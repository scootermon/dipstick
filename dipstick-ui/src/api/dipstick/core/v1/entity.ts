// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/core/v1/entity.proto" (package "dipstick.core.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../../google/protobuf/timestamp";
/**
 * @generated from protobuf message dipstick.core.v1.EntityMeta
 */
export interface EntityMeta {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMetaSpec spec = 1;
   */
  spec?: EntityMetaSpec;
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMetaStatus status = 2;
   */
  status?: EntityMetaStatus;
}
/**
 * @generated from protobuf message dipstick.core.v1.EntityMetaSpec
 */
export interface EntityMetaSpec {
  /**
   * zero means not set
   *
   * @generated from protobuf field: uint32 unique_id = 1;
   */
  uniqueId: number;
  /**
   * @generated from protobuf field: string package = 2;
   */
  package: string;
  /**
   * @generated from protobuf field: string kind = 4;
   */
  kind: string;
  /**
   * @generated from protobuf field: optional string key = 5;
   */
  key?: string;
  /**
   * @generated from protobuf field: map<string, string> annotations = 3;
   */
  annotations: {
    [key: string]: string;
  };
}
/**
 * @generated from protobuf message dipstick.core.v1.EntityMetaStatus
 */
export interface EntityMetaStatus {
  /**
   * @generated from protobuf field: google.protobuf.Timestamp created_at = 1;
   */
  createdAt?: Timestamp;
  /**
   * @generated from protobuf field: repeated dipstick.core.v1.EntityDependency dependents = 2;
   */
  dependents: EntityDependency[];
  /**
   * @generated from protobuf field: repeated dipstick.core.v1.EntityDependency dependencies = 3;
   */
  dependencies: EntityDependency[];
}
/**
 * @generated from protobuf message dipstick.core.v1.EntityDependency
 */
export interface EntityDependency {
  /**
   * @generated from protobuf field: uint32 unique_id = 1;
   */
  uniqueId: number;
  /**
   * @generated from protobuf field: google.protobuf.Timestamp created_at = 2;
   */
  createdAt?: Timestamp;
}
/**
 * @generated from protobuf message dipstick.core.v1.EntitySelector
 */
export interface EntitySelector {
  /**
   * @generated from protobuf oneof: entity_selector_variant
   */
  entitySelectorVariant:
    | {
        oneofKind: "uniqueId";
        /**
         * @generated from protobuf field: uint32 unique_id = 1;
         */
        uniqueId: number;
      }
    | {
        oneofKind: "key";
        /**
         * @generated from protobuf field: string key = 2;
         */
        key: string;
      }
    | {
        oneofKind: undefined;
      };
}
// @generated message type with reflection information, may provide speed optimized methods
class EntityMeta$Type extends MessageType<EntityMeta> {
  constructor() {
    super("dipstick.core.v1.EntityMeta", [
      { no: 1, name: "spec", kind: "message", T: () => EntityMetaSpec },
      { no: 2, name: "status", kind: "message", T: () => EntityMetaStatus },
    ]);
  }
  create(value?: PartialMessage<EntityMeta>): EntityMeta {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<EntityMeta>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EntityMeta,
  ): EntityMeta {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMetaSpec spec */ 1:
          message.spec = EntityMetaSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        case /* dipstick.core.v1.EntityMetaStatus status */ 2:
          message.status = EntityMetaStatus.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.status,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: EntityMeta,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMetaSpec spec = 1; */
    if (message.spec)
      EntityMetaSpec.internalBinaryWrite(
        message.spec,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.core.v1.EntityMetaStatus status = 2; */
    if (message.status)
      EntityMetaStatus.internalBinaryWrite(
        message.status,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.core.v1.EntityMeta
 */
export const EntityMeta = new EntityMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityMetaSpec$Type extends MessageType<EntityMetaSpec> {
  constructor() {
    super("dipstick.core.v1.EntityMetaSpec", [
      { no: 1, name: "unique_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
      { no: 2, name: "package", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 4, name: "kind", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 5,
        name: "key",
        kind: "scalar",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "annotations",
        kind: "map",
        K: 9 /*ScalarType.STRING*/,
        V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      },
    ]);
  }
  create(value?: PartialMessage<EntityMetaSpec>): EntityMetaSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.uniqueId = 0;
    message.package = "";
    message.kind = "";
    message.annotations = {};
    if (value !== undefined)
      reflectionMergePartial<EntityMetaSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EntityMetaSpec,
  ): EntityMetaSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 unique_id */ 1:
          message.uniqueId = reader.uint32();
          break;
        case /* string package */ 2:
          message.package = reader.string();
          break;
        case /* string kind */ 4:
          message.kind = reader.string();
          break;
        case /* optional string key */ 5:
          message.key = reader.string();
          break;
        case /* map<string, string> annotations */ 3:
          this.binaryReadMap3(message.annotations, reader, options);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  private binaryReadMap3(
    map: EntityMetaSpec["annotations"],
    reader: IBinaryReader,
    options: BinaryReadOptions,
  ): void {
    let len = reader.uint32(),
      end = reader.pos + len,
      key: keyof EntityMetaSpec["annotations"] | undefined,
      val: EntityMetaSpec["annotations"][any] | undefined;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = reader.string();
          break;
        case 2:
          val = reader.string();
          break;
        default:
          throw new globalThis.Error(
            "unknown map entry field for field dipstick.core.v1.EntityMetaSpec.annotations",
          );
      }
    }
    map[key ?? ""] = val ?? "";
  }
  internalBinaryWrite(
    message: EntityMetaSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* uint32 unique_id = 1; */
    if (message.uniqueId !== 0)
      writer.tag(1, WireType.Varint).uint32(message.uniqueId);
    /* string package = 2; */
    if (message.package !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.package);
    /* string kind = 4; */
    if (message.kind !== "")
      writer.tag(4, WireType.LengthDelimited).string(message.kind);
    /* optional string key = 5; */
    if (message.key !== undefined)
      writer.tag(5, WireType.LengthDelimited).string(message.key);
    /* map<string, string> annotations = 3; */
    for (let k of globalThis.Object.keys(message.annotations))
      writer
        .tag(3, WireType.LengthDelimited)
        .fork()
        .tag(1, WireType.LengthDelimited)
        .string(k)
        .tag(2, WireType.LengthDelimited)
        .string(message.annotations[k])
        .join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.core.v1.EntityMetaSpec
 */
export const EntityMetaSpec = new EntityMetaSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityMetaStatus$Type extends MessageType<EntityMetaStatus> {
  constructor() {
    super("dipstick.core.v1.EntityMetaStatus", [
      { no: 1, name: "created_at", kind: "message", T: () => Timestamp },
      {
        no: 2,
        name: "dependents",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => EntityDependency,
      },
      {
        no: 3,
        name: "dependencies",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => EntityDependency,
      },
    ]);
  }
  create(value?: PartialMessage<EntityMetaStatus>): EntityMetaStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.dependents = [];
    message.dependencies = [];
    if (value !== undefined)
      reflectionMergePartial<EntityMetaStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EntityMetaStatus,
  ): EntityMetaStatus {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* google.protobuf.Timestamp created_at */ 1:
          message.createdAt = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.createdAt,
          );
          break;
        case /* repeated dipstick.core.v1.EntityDependency dependents */ 2:
          message.dependents.push(
            EntityDependency.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* repeated dipstick.core.v1.EntityDependency dependencies */ 3:
          message.dependencies.push(
            EntityDependency.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: EntityMetaStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* google.protobuf.Timestamp created_at = 1; */
    if (message.createdAt)
      Timestamp.internalBinaryWrite(
        message.createdAt,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated dipstick.core.v1.EntityDependency dependents = 2; */
    for (let i = 0; i < message.dependents.length; i++)
      EntityDependency.internalBinaryWrite(
        message.dependents[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated dipstick.core.v1.EntityDependency dependencies = 3; */
    for (let i = 0; i < message.dependencies.length; i++)
      EntityDependency.internalBinaryWrite(
        message.dependencies[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.core.v1.EntityMetaStatus
 */
export const EntityMetaStatus = new EntityMetaStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntityDependency$Type extends MessageType<EntityDependency> {
  constructor() {
    super("dipstick.core.v1.EntityDependency", [
      { no: 1, name: "unique_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
      { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
    ]);
  }
  create(value?: PartialMessage<EntityDependency>): EntityDependency {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.uniqueId = 0;
    if (value !== undefined)
      reflectionMergePartial<EntityDependency>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EntityDependency,
  ): EntityDependency {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 unique_id */ 1:
          message.uniqueId = reader.uint32();
          break;
        case /* google.protobuf.Timestamp created_at */ 2:
          message.createdAt = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.createdAt,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: EntityDependency,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* uint32 unique_id = 1; */
    if (message.uniqueId !== 0)
      writer.tag(1, WireType.Varint).uint32(message.uniqueId);
    /* google.protobuf.Timestamp created_at = 2; */
    if (message.createdAt)
      Timestamp.internalBinaryWrite(
        message.createdAt,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.core.v1.EntityDependency
 */
export const EntityDependency = new EntityDependency$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EntitySelector$Type extends MessageType<EntitySelector> {
  constructor() {
    super("dipstick.core.v1.EntitySelector", [
      {
        no: 1,
        name: "unique_id",
        kind: "scalar",
        oneof: "entitySelectorVariant",
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 2,
        name: "key",
        kind: "scalar",
        oneof: "entitySelectorVariant",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<EntitySelector>): EntitySelector {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.entitySelectorVariant = { oneofKind: undefined };
    if (value !== undefined)
      reflectionMergePartial<EntitySelector>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: EntitySelector,
  ): EntitySelector {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 unique_id */ 1:
          message.entitySelectorVariant = {
            oneofKind: "uniqueId",
            uniqueId: reader.uint32(),
          };
          break;
        case /* string key */ 2:
          message.entitySelectorVariant = {
            oneofKind: "key",
            key: reader.string(),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: EntitySelector,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* uint32 unique_id = 1; */
    if (message.entitySelectorVariant.oneofKind === "uniqueId")
      writer
        .tag(1, WireType.Varint)
        .uint32(message.entitySelectorVariant.uniqueId);
    /* string key = 2; */
    if (message.entitySelectorVariant.oneofKind === "key")
      writer
        .tag(2, WireType.LengthDelimited)
        .string(message.entitySelectorVariant.key);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.core.v1.EntitySelector
 */
export const EntitySelector = new EntitySelector$Type();
