// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/core/v1/service.proto" (package "dipstick.core.v1", syntax proto3)
// tslint:disable
import { CoreService } from "./service";
import type { ForceRemoveAllEntitiesResponse } from "./service";
import type { ForceRemoveAllEntitiesRequest } from "./service";
import type { ListEntitiesResponse } from "./service";
import type { ListEntitiesRequest } from "./service";
import type { LogSubscribeResponse } from "./service";
import type { LogSubscribeRequest } from "./service";
import type { LogConfigResponse } from "./service";
import type { LogConfigRequest } from "./service";
import type { VersionResponse } from "./service";
import type { VersionRequest } from "./service";
import type { ShutdownResponse } from "./service";
import type { ShutdownRequest } from "./service";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";

/**
 * Server control services.
 *
 * @generated from protobuf service dipstick.core.v1.CoreService
 */
export interface ICoreServiceClient {
  /**
   * Shuts down the server.
   *
   * @generated from protobuf rpc: Shutdown(dipstick.core.v1.ShutdownRequest) returns (dipstick.core.v1.ShutdownResponse);
   */
  shutdown(
    input: ShutdownRequest,
    options?: RpcOptions,
  ): UnaryCall<ShutdownRequest, ShutdownResponse>;
  /**
   * Returns the version of the server.
   *
   * @generated from protobuf rpc: Version(dipstick.core.v1.VersionRequest) returns (dipstick.core.v1.VersionResponse);
   */
  version(
    input: VersionRequest,
    options?: RpcOptions,
  ): UnaryCall<VersionRequest, VersionResponse>;
  /**
   * Configures or queries the server's logging.
   *
   * @generated from protobuf rpc: LogConfig(dipstick.core.v1.LogConfigRequest) returns (dipstick.core.v1.LogConfigResponse);
   */
  logConfig(
    input: LogConfigRequest,
    options?: RpcOptions,
  ): UnaryCall<LogConfigRequest, LogConfigResponse>;
  /**
   * Subscribes to the server's logging.
   *
   * @generated from protobuf rpc: LogSubscribe(dipstick.core.v1.LogSubscribeRequest) returns (stream dipstick.core.v1.LogSubscribeResponse);
   */
  logSubscribe(
    input: LogSubscribeRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<LogSubscribeRequest, LogSubscribeResponse>;
  /**
   * @generated from protobuf rpc: ListEntities(dipstick.core.v1.ListEntitiesRequest) returns (dipstick.core.v1.ListEntitiesResponse);
   */
  listEntities(
    input: ListEntitiesRequest,
    options?: RpcOptions,
  ): UnaryCall<ListEntitiesRequest, ListEntitiesResponse>;
  /**
   * @generated from protobuf rpc: ForceRemoveAllEntities(dipstick.core.v1.ForceRemoveAllEntitiesRequest) returns (dipstick.core.v1.ForceRemoveAllEntitiesResponse);
   */
  forceRemoveAllEntities(
    input: ForceRemoveAllEntitiesRequest,
    options?: RpcOptions,
  ): UnaryCall<ForceRemoveAllEntitiesRequest, ForceRemoveAllEntitiesResponse>;
}
/**
 * Server control services.
 *
 * @generated from protobuf service dipstick.core.v1.CoreService
 */
export class CoreServiceClient implements ICoreServiceClient, ServiceInfo {
  typeName = CoreService.typeName;
  methods = CoreService.methods;
  options = CoreService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * Shuts down the server.
   *
   * @generated from protobuf rpc: Shutdown(dipstick.core.v1.ShutdownRequest) returns (dipstick.core.v1.ShutdownResponse);
   */
  shutdown(
    input: ShutdownRequest,
    options?: RpcOptions,
  ): UnaryCall<ShutdownRequest, ShutdownResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ShutdownRequest, ShutdownResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Returns the version of the server.
   *
   * @generated from protobuf rpc: Version(dipstick.core.v1.VersionRequest) returns (dipstick.core.v1.VersionResponse);
   */
  version(
    input: VersionRequest,
    options?: RpcOptions,
  ): UnaryCall<VersionRequest, VersionResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<VersionRequest, VersionResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Configures or queries the server's logging.
   *
   * @generated from protobuf rpc: LogConfig(dipstick.core.v1.LogConfigRequest) returns (dipstick.core.v1.LogConfigResponse);
   */
  logConfig(
    input: LogConfigRequest,
    options?: RpcOptions,
  ): UnaryCall<LogConfigRequest, LogConfigResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<LogConfigRequest, LogConfigResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * Subscribes to the server's logging.
   *
   * @generated from protobuf rpc: LogSubscribe(dipstick.core.v1.LogSubscribeRequest) returns (stream dipstick.core.v1.LogSubscribeResponse);
   */
  logSubscribe(
    input: LogSubscribeRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<LogSubscribeRequest, LogSubscribeResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<LogSubscribeRequest, LogSubscribeResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: ListEntities(dipstick.core.v1.ListEntitiesRequest) returns (dipstick.core.v1.ListEntitiesResponse);
   */
  listEntities(
    input: ListEntitiesRequest,
    options?: RpcOptions,
  ): UnaryCall<ListEntitiesRequest, ListEntitiesResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ListEntitiesRequest, ListEntitiesResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: ForceRemoveAllEntities(dipstick.core.v1.ForceRemoveAllEntitiesRequest) returns (dipstick.core.v1.ForceRemoveAllEntitiesResponse);
   */
  forceRemoveAllEntities(
    input: ForceRemoveAllEntitiesRequest,
    options?: RpcOptions,
  ): UnaryCall<ForceRemoveAllEntitiesRequest, ForceRemoveAllEntitiesResponse> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      ForceRemoveAllEntitiesRequest,
      ForceRemoveAllEntitiesResponse
    >("unary", this._transport, method, opt, input);
  }
}
