// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/core/v1/file.proto" (package "dipstick.core.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";

/**
 * @generated from protobuf message dipstick.core.v1.File
 */
export interface File {
  /**
   * @generated from protobuf oneof: file_variant
   */
  fileVariant:
    | {
        oneofKind: "serverPath";
        /**
         * @generated from protobuf field: string server_path = 1;
         */
        serverPath: string;
      }
    | {
        oneofKind: undefined;
      };
}
// @generated message type with reflection information, may provide speed optimized methods
class File$Type extends MessageType<File> {
  constructor() {
    super("dipstick.core.v1.File", [
      {
        no: 1,
        name: "server_path",
        kind: "scalar",
        oneof: "fileVariant",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<File>): File {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.fileVariant = { oneofKind: undefined };
    if (value !== undefined) reflectionMergePartial<File>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: File,
  ): File {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string server_path */ 1:
          message.fileVariant = {
            oneofKind: "serverPath",
            serverPath: reader.string(),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: File,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string server_path = 1; */
    if (message.fileVariant.oneofKind === "serverPath")
      writer
        .tag(1, WireType.LengthDelimited)
        .string(message.fileVariant.serverPath);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.core.v1.File
 */
export const File = new File$Type();
