// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/gpio/v1/pin.proto" (package "dipstick.gpio.v1", syntax proto3)
// tslint:disable
import { Timestamp } from "../../../google/protobuf/timestamp";
import { IoDir } from "../../core/v1/direction";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";

/**
 * @generated from protobuf message dipstick.gpio.v1.PinSpec
 */
export interface PinSpec {
  /**
   * @generated from protobuf field: string line_name = 2;
   */
  lineName: string;
  /**
   * @generated from protobuf field: dipstick.core.v1.IoDir direction = 3;
   */
  direction: IoDir;
}
/**
 * @generated from protobuf message dipstick.gpio.v1.PinStatus
 */
export interface PinStatus {
  /**
   * @generated from protobuf field: google.protobuf.Timestamp changed_at = 2;
   */
  changedAt?: Timestamp;
  /**
   * @generated from protobuf field: dipstick.gpio.v1.Level logical = 1;
   */
  logical: Level;
}
/**
 * @generated from protobuf enum dipstick.gpio.v1.Level
 */
export enum Level {
  /**
   * @generated from protobuf enum value: LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,
  /**
   * @generated from protobuf enum value: LEVEL_LOW = 1;
   */
  LOW = 1,
  /**
   * @generated from protobuf enum value: LEVEL_HIGH = 2;
   */
  HIGH = 2,
}
// @generated message type with reflection information, may provide speed optimized methods
class PinSpec$Type extends MessageType<PinSpec> {
  constructor() {
    super("dipstick.gpio.v1.PinSpec", [
      { no: 2, name: "line_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: "direction",
        kind: "enum",
        T: () => ["dipstick.core.v1.IoDir", IoDir, "IO_DIR_"],
      },
    ]);
  }
  create(value?: PartialMessage<PinSpec>): PinSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.lineName = "";
    message.direction = 0;
    if (value !== undefined)
      reflectionMergePartial<PinSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PinSpec,
  ): PinSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string line_name */ 2:
          message.lineName = reader.string();
          break;
        case /* dipstick.core.v1.IoDir direction */ 3:
          message.direction = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PinSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string line_name = 2; */
    if (message.lineName !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.lineName);
    /* dipstick.core.v1.IoDir direction = 3; */
    if (message.direction !== 0)
      writer.tag(3, WireType.Varint).int32(message.direction);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.gpio.v1.PinSpec
 */
export const PinSpec = new PinSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinStatus$Type extends MessageType<PinStatus> {
  constructor() {
    super("dipstick.gpio.v1.PinStatus", [
      { no: 2, name: "changed_at", kind: "message", T: () => Timestamp },
      {
        no: 1,
        name: "logical",
        kind: "enum",
        T: () => ["dipstick.gpio.v1.Level", Level, "LEVEL_"],
      },
    ]);
  }
  create(value?: PartialMessage<PinStatus>): PinStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.logical = 0;
    if (value !== undefined)
      reflectionMergePartial<PinStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: PinStatus,
  ): PinStatus {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* google.protobuf.Timestamp changed_at */ 2:
          message.changedAt = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.changedAt,
          );
          break;
        case /* dipstick.gpio.v1.Level logical */ 1:
          message.logical = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: PinStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* google.protobuf.Timestamp changed_at = 2; */
    if (message.changedAt)
      Timestamp.internalBinaryWrite(
        message.changedAt,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.gpio.v1.Level logical = 1; */
    if (message.logical !== 0)
      writer.tag(1, WireType.Varint).int32(message.logical);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.gpio.v1.PinStatus
 */
export const PinStatus = new PinStatus$Type();
