// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/gpio/v1/service.proto" (package "dipstick.gpio.v1", syntax proto3)
// tslint:disable
import { EntitySelector } from "../../core/v1/entity";
import { EntityMetaSpec } from "../../core/v1/entity";
import { ChipEntity } from "./chip";
import { ChipSpec } from "./chip";
import { PinStatus } from "./pin";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceType } from "@protobuf-ts/runtime-rpc";

/**
 * @generated from protobuf message dipstick.gpio.v1.CreateChipRequest
 */
export interface CreateChipRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMetaSpec meta = 1;
   */
  meta?: EntityMetaSpec;
  /**
   * @generated from protobuf field: dipstick.gpio.v1.ChipSpec spec = 2;
   */
  spec?: ChipSpec;
}
/**
 * @generated from protobuf message dipstick.gpio.v1.CreateChipResponse
 */
export interface CreateChipResponse {
  /**
   * @generated from protobuf field: dipstick.gpio.v1.ChipEntity chip = 1;
   */
  chip?: ChipEntity;
}
/**
 * @generated from protobuf message dipstick.gpio.v1.GetChipRequest
 */
export interface GetChipRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector chip = 1;
   */
  chip?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.gpio.v1.GetChipResponse
 */
export interface GetChipResponse {
  /**
   * @generated from protobuf field: dipstick.gpio.v1.ChipEntity chip = 1;
   */
  chip?: ChipEntity;
}
/**
 * @generated from protobuf message dipstick.gpio.v1.SubscribeChipRequest
 */
export interface SubscribeChipRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector chip = 1;
   */
  chip?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.gpio.v1.SubscribeChipResponse
 */
export interface SubscribeChipResponse {
  /**
   * @generated from protobuf field: string pin_id = 1;
   */
  pinId: string;
  /**
   * @generated from protobuf field: dipstick.gpio.v1.PinStatus status = 2;
   */
  status?: PinStatus;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateChipRequest$Type extends MessageType<CreateChipRequest> {
  constructor() {
    super("dipstick.gpio.v1.CreateChipRequest", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMetaSpec },
      { no: 2, name: "spec", kind: "message", T: () => ChipSpec },
    ]);
  }
  create(value?: PartialMessage<CreateChipRequest>): CreateChipRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateChipRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateChipRequest,
  ): CreateChipRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMetaSpec meta */ 1:
          message.meta = EntityMetaSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.gpio.v1.ChipSpec spec */ 2:
          message.spec = ChipSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateChipRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMetaSpec meta = 1; */
    if (message.meta)
      EntityMetaSpec.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.gpio.v1.ChipSpec spec = 2; */
    if (message.spec)
      ChipSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.gpio.v1.CreateChipRequest
 */
export const CreateChipRequest = new CreateChipRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateChipResponse$Type extends MessageType<CreateChipResponse> {
  constructor() {
    super("dipstick.gpio.v1.CreateChipResponse", [
      { no: 1, name: "chip", kind: "message", T: () => ChipEntity },
    ]);
  }
  create(value?: PartialMessage<CreateChipResponse>): CreateChipResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateChipResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateChipResponse,
  ): CreateChipResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.gpio.v1.ChipEntity chip */ 1:
          message.chip = ChipEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.chip,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateChipResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.gpio.v1.ChipEntity chip = 1; */
    if (message.chip)
      ChipEntity.internalBinaryWrite(
        message.chip,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.gpio.v1.CreateChipResponse
 */
export const CreateChipResponse = new CreateChipResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChipRequest$Type extends MessageType<GetChipRequest> {
  constructor() {
    super("dipstick.gpio.v1.GetChipRequest", [
      { no: 1, name: "chip", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<GetChipRequest>): GetChipRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetChipRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetChipRequest,
  ): GetChipRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector chip */ 1:
          message.chip = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.chip,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetChipRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector chip = 1; */
    if (message.chip)
      EntitySelector.internalBinaryWrite(
        message.chip,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.gpio.v1.GetChipRequest
 */
export const GetChipRequest = new GetChipRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChipResponse$Type extends MessageType<GetChipResponse> {
  constructor() {
    super("dipstick.gpio.v1.GetChipResponse", [
      { no: 1, name: "chip", kind: "message", T: () => ChipEntity },
    ]);
  }
  create(value?: PartialMessage<GetChipResponse>): GetChipResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetChipResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetChipResponse,
  ): GetChipResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.gpio.v1.ChipEntity chip */ 1:
          message.chip = ChipEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.chip,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetChipResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.gpio.v1.ChipEntity chip = 1; */
    if (message.chip)
      ChipEntity.internalBinaryWrite(
        message.chip,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.gpio.v1.GetChipResponse
 */
export const GetChipResponse = new GetChipResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeChipRequest$Type extends MessageType<SubscribeChipRequest> {
  constructor() {
    super("dipstick.gpio.v1.SubscribeChipRequest", [
      { no: 1, name: "chip", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<SubscribeChipRequest>): SubscribeChipRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<SubscribeChipRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SubscribeChipRequest,
  ): SubscribeChipRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector chip */ 1:
          message.chip = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.chip,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SubscribeChipRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector chip = 1; */
    if (message.chip)
      EntitySelector.internalBinaryWrite(
        message.chip,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.gpio.v1.SubscribeChipRequest
 */
export const SubscribeChipRequest = new SubscribeChipRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeChipResponse$Type extends MessageType<SubscribeChipResponse> {
  constructor() {
    super("dipstick.gpio.v1.SubscribeChipResponse", [
      { no: 1, name: "pin_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "status", kind: "message", T: () => PinStatus },
    ]);
  }
  create(value?: PartialMessage<SubscribeChipResponse>): SubscribeChipResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.pinId = "";
    if (value !== undefined)
      reflectionMergePartial<SubscribeChipResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SubscribeChipResponse,
  ): SubscribeChipResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string pin_id */ 1:
          message.pinId = reader.string();
          break;
        case /* dipstick.gpio.v1.PinStatus status */ 2:
          message.status = PinStatus.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.status,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SubscribeChipResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string pin_id = 1; */
    if (message.pinId !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.pinId);
    /* dipstick.gpio.v1.PinStatus status = 2; */
    if (message.status)
      PinStatus.internalBinaryWrite(
        message.status,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.gpio.v1.SubscribeChipResponse
 */
export const SubscribeChipResponse = new SubscribeChipResponse$Type();
/**
 * @generated ServiceType for protobuf service dipstick.gpio.v1.GpioService
 */
export const GpioService = new ServiceType("dipstick.gpio.v1.GpioService", [
  {
    name: "CreateChip",
    options: {},
    I: CreateChipRequest,
    O: CreateChipResponse,
  },
  { name: "GetChip", options: {}, I: GetChipRequest, O: GetChipResponse },
  {
    name: "SubscribeChip",
    serverStreaming: true,
    options: {},
    I: SubscribeChipRequest,
    O: SubscribeChipResponse,
  },
]);
