// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/gpio/v1/service.proto" (package "dipstick.gpio.v1", syntax proto3)
// tslint:disable
import { GpioService } from "./service";
import type { SubscribeChipResponse } from "./service";
import type { SubscribeChipRequest } from "./service";
import type { GetChipResponse } from "./service";
import type { GetChipRequest } from "./service";
import type { CreateChipResponse } from "./service";
import type { CreateChipRequest } from "./service";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";

/**
 * @generated from protobuf service dipstick.gpio.v1.GpioService
 */
export interface IGpioServiceClient {
  /**
   * @generated from protobuf rpc: CreateChip(dipstick.gpio.v1.CreateChipRequest) returns (dipstick.gpio.v1.CreateChipResponse);
   */
  createChip(
    input: CreateChipRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateChipRequest, CreateChipResponse>;
  /**
   * @generated from protobuf rpc: GetChip(dipstick.gpio.v1.GetChipRequest) returns (dipstick.gpio.v1.GetChipResponse);
   */
  getChip(
    input: GetChipRequest,
    options?: RpcOptions,
  ): UnaryCall<GetChipRequest, GetChipResponse>;
  /**
   * @generated from protobuf rpc: SubscribeChip(dipstick.gpio.v1.SubscribeChipRequest) returns (stream dipstick.gpio.v1.SubscribeChipResponse);
   */
  subscribeChip(
    input: SubscribeChipRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<SubscribeChipRequest, SubscribeChipResponse>;
}
/**
 * @generated from protobuf service dipstick.gpio.v1.GpioService
 */
export class GpioServiceClient implements IGpioServiceClient, ServiceInfo {
  typeName = GpioService.typeName;
  methods = GpioService.methods;
  options = GpioService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: CreateChip(dipstick.gpio.v1.CreateChipRequest) returns (dipstick.gpio.v1.CreateChipResponse);
   */
  createChip(
    input: CreateChipRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateChipRequest, CreateChipResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateChipRequest, CreateChipResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetChip(dipstick.gpio.v1.GetChipRequest) returns (dipstick.gpio.v1.GetChipResponse);
   */
  getChip(
    input: GetChipRequest,
    options?: RpcOptions,
  ): UnaryCall<GetChipRequest, GetChipResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetChipRequest, GetChipResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: SubscribeChip(dipstick.gpio.v1.SubscribeChipRequest) returns (stream dipstick.gpio.v1.SubscribeChipResponse);
   */
  subscribeChip(
    input: SubscribeChipRequest,
    options?: RpcOptions,
  ): ServerStreamingCall<SubscribeChipRequest, SubscribeChipResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<SubscribeChipRequest, SubscribeChipResponse>(
      "serverStreaming",
      this._transport,
      method,
      opt,
      input,
    );
  }
}
