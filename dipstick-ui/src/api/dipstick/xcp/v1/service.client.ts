// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/xcp/v1/service.proto" (package "dipstick.xcp.v1", syntax proto3)
// tslint:disable
import { XcpService } from "./service";
import type { WriteCharacteristicResponse } from "./service";
import type { WriteCharacteristicRequest } from "./service";
import type { ReadCharacteristicResponse } from "./service";
import type { ReadCharacteristicRequest } from "./service";
import type { ReadMeasurementResponse } from "./service";
import type { ReadMeasurementRequest } from "./service";
import type { CommandResponse } from "./service";
import type { CommandRequest } from "./service";
import type { GetSessionResponse } from "./service";
import type { GetSessionRequest } from "./service";
import type { CreateSessionResponse } from "./service";
import type { CreateSessionRequest } from "./service";
import type { GetA2lCharacteristicResponse } from "./service";
import type { GetA2lCharacteristicRequest } from "./service";
import type { GetA2lMeasurementResponse } from "./service";
import type { GetA2lMeasurementRequest } from "./service";
import type { GetA2lResponse } from "./service";
import type { GetA2lRequest } from "./service";
import type { CreateA2lResponse } from "./service";
import type { CreateA2lRequest } from "./service";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";

/**
 * @generated from protobuf service dipstick.xcp.v1.XcpService
 */
export interface IXcpServiceClient {
  /**
   * @generated from protobuf rpc: CreateA2l(dipstick.xcp.v1.CreateA2lRequest) returns (dipstick.xcp.v1.CreateA2lResponse);
   */
  createA2L(
    input: CreateA2lRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateA2lRequest, CreateA2lResponse>;
  /**
   * @generated from protobuf rpc: GetA2l(dipstick.xcp.v1.GetA2lRequest) returns (dipstick.xcp.v1.GetA2lResponse);
   */
  getA2L(
    input: GetA2lRequest,
    options?: RpcOptions,
  ): UnaryCall<GetA2lRequest, GetA2lResponse>;
  /**
   * @generated from protobuf rpc: GetA2lMeasurement(dipstick.xcp.v1.GetA2lMeasurementRequest) returns (dipstick.xcp.v1.GetA2lMeasurementResponse);
   */
  getA2LMeasurement(
    input: GetA2lMeasurementRequest,
    options?: RpcOptions,
  ): UnaryCall<GetA2lMeasurementRequest, GetA2lMeasurementResponse>;
  /**
   * @generated from protobuf rpc: GetA2lCharacteristic(dipstick.xcp.v1.GetA2lCharacteristicRequest) returns (dipstick.xcp.v1.GetA2lCharacteristicResponse);
   */
  getA2LCharacteristic(
    input: GetA2lCharacteristicRequest,
    options?: RpcOptions,
  ): UnaryCall<GetA2lCharacteristicRequest, GetA2lCharacteristicResponse>;
  /**
   * @generated from protobuf rpc: CreateSession(dipstick.xcp.v1.CreateSessionRequest) returns (dipstick.xcp.v1.CreateSessionResponse);
   */
  createSession(
    input: CreateSessionRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateSessionRequest, CreateSessionResponse>;
  /**
   * @generated from protobuf rpc: GetSession(dipstick.xcp.v1.GetSessionRequest) returns (dipstick.xcp.v1.GetSessionResponse);
   */
  getSession(
    input: GetSessionRequest,
    options?: RpcOptions,
  ): UnaryCall<GetSessionRequest, GetSessionResponse>;
  /**
   * @generated from protobuf rpc: Command(dipstick.xcp.v1.CommandRequest) returns (dipstick.xcp.v1.CommandResponse);
   */
  command(
    input: CommandRequest,
    options?: RpcOptions,
  ): UnaryCall<CommandRequest, CommandResponse>;
  /**
   * @generated from protobuf rpc: ReadMeasurement(dipstick.xcp.v1.ReadMeasurementRequest) returns (dipstick.xcp.v1.ReadMeasurementResponse);
   */
  readMeasurement(
    input: ReadMeasurementRequest,
    options?: RpcOptions,
  ): UnaryCall<ReadMeasurementRequest, ReadMeasurementResponse>;
  /**
   * @generated from protobuf rpc: ReadCharacteristic(dipstick.xcp.v1.ReadCharacteristicRequest) returns (dipstick.xcp.v1.ReadCharacteristicResponse);
   */
  readCharacteristic(
    input: ReadCharacteristicRequest,
    options?: RpcOptions,
  ): UnaryCall<ReadCharacteristicRequest, ReadCharacteristicResponse>;
  /**
   * @generated from protobuf rpc: WriteCharacteristic(dipstick.xcp.v1.WriteCharacteristicRequest) returns (dipstick.xcp.v1.WriteCharacteristicResponse);
   */
  writeCharacteristic(
    input: WriteCharacteristicRequest,
    options?: RpcOptions,
  ): UnaryCall<WriteCharacteristicRequest, WriteCharacteristicResponse>;
}
/**
 * @generated from protobuf service dipstick.xcp.v1.XcpService
 */
export class XcpServiceClient implements IXcpServiceClient, ServiceInfo {
  typeName = XcpService.typeName;
  methods = XcpService.methods;
  options = XcpService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: CreateA2l(dipstick.xcp.v1.CreateA2lRequest) returns (dipstick.xcp.v1.CreateA2lResponse);
   */
  createA2L(
    input: CreateA2lRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateA2lRequest, CreateA2lResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateA2lRequest, CreateA2lResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetA2l(dipstick.xcp.v1.GetA2lRequest) returns (dipstick.xcp.v1.GetA2lResponse);
   */
  getA2L(
    input: GetA2lRequest,
    options?: RpcOptions,
  ): UnaryCall<GetA2lRequest, GetA2lResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetA2lRequest, GetA2lResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetA2lMeasurement(dipstick.xcp.v1.GetA2lMeasurementRequest) returns (dipstick.xcp.v1.GetA2lMeasurementResponse);
   */
  getA2LMeasurement(
    input: GetA2lMeasurementRequest,
    options?: RpcOptions,
  ): UnaryCall<GetA2lMeasurementRequest, GetA2lMeasurementResponse> {
    const method = this.methods[2],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetA2lMeasurementRequest, GetA2lMeasurementResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetA2lCharacteristic(dipstick.xcp.v1.GetA2lCharacteristicRequest) returns (dipstick.xcp.v1.GetA2lCharacteristicResponse);
   */
  getA2LCharacteristic(
    input: GetA2lCharacteristicRequest,
    options?: RpcOptions,
  ): UnaryCall<GetA2lCharacteristicRequest, GetA2lCharacteristicResponse> {
    const method = this.methods[3],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      GetA2lCharacteristicRequest,
      GetA2lCharacteristicResponse
    >("unary", this._transport, method, opt, input);
  }
  /**
   * @generated from protobuf rpc: CreateSession(dipstick.xcp.v1.CreateSessionRequest) returns (dipstick.xcp.v1.CreateSessionResponse);
   */
  createSession(
    input: CreateSessionRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateSessionRequest, CreateSessionResponse> {
    const method = this.methods[4],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateSessionRequest, CreateSessionResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetSession(dipstick.xcp.v1.GetSessionRequest) returns (dipstick.xcp.v1.GetSessionResponse);
   */
  getSession(
    input: GetSessionRequest,
    options?: RpcOptions,
  ): UnaryCall<GetSessionRequest, GetSessionResponse> {
    const method = this.methods[5],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetSessionRequest, GetSessionResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: Command(dipstick.xcp.v1.CommandRequest) returns (dipstick.xcp.v1.CommandResponse);
   */
  command(
    input: CommandRequest,
    options?: RpcOptions,
  ): UnaryCall<CommandRequest, CommandResponse> {
    const method = this.methods[6],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CommandRequest, CommandResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: ReadMeasurement(dipstick.xcp.v1.ReadMeasurementRequest) returns (dipstick.xcp.v1.ReadMeasurementResponse);
   */
  readMeasurement(
    input: ReadMeasurementRequest,
    options?: RpcOptions,
  ): UnaryCall<ReadMeasurementRequest, ReadMeasurementResponse> {
    const method = this.methods[7],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<ReadMeasurementRequest, ReadMeasurementResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: ReadCharacteristic(dipstick.xcp.v1.ReadCharacteristicRequest) returns (dipstick.xcp.v1.ReadCharacteristicResponse);
   */
  readCharacteristic(
    input: ReadCharacteristicRequest,
    options?: RpcOptions,
  ): UnaryCall<ReadCharacteristicRequest, ReadCharacteristicResponse> {
    const method = this.methods[8],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      ReadCharacteristicRequest,
      ReadCharacteristicResponse
    >("unary", this._transport, method, opt, input);
  }
  /**
   * @generated from protobuf rpc: WriteCharacteristic(dipstick.xcp.v1.WriteCharacteristicRequest) returns (dipstick.xcp.v1.WriteCharacteristicResponse);
   */
  writeCharacteristic(
    input: WriteCharacteristicRequest,
    options?: RpcOptions,
  ): UnaryCall<WriteCharacteristicRequest, WriteCharacteristicResponse> {
    const method = this.methods[9],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<
      WriteCharacteristicRequest,
      WriteCharacteristicResponse
    >("unary", this._transport, method, opt, input);
  }
}
