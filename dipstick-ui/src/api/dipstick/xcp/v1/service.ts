// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/xcp/v1/service.proto" (package "dipstick.xcp.v1", syntax proto3)
// tslint:disable
import { Value } from "../../../google/protobuf/struct";
import { Timestamp } from "../../../google/protobuf/timestamp";
import { EntitySelector } from "../../core/v1/entity";
import { EntityMetaSpec } from "../../core/v1/entity";
import { A2lFullCharacteristic } from "./a2l";
import { A2lMeasurement } from "./a2l";
import { A2lEntity } from "./a2l";
import { A2lSpec } from "./a2l";
import { CtoResp } from "./protocol";
import { CtoReq } from "./protocol";
import { SessionEntity } from "./session";
import { SessionSpec } from "./session";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceType } from "@protobuf-ts/runtime-rpc";

/**
 * @generated from protobuf message dipstick.xcp.v1.CreateA2lRequest
 */
export interface CreateA2lRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMetaSpec meta = 1;
   */
  meta?: EntityMetaSpec;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lSpec spec = 2;
   */
  spec?: A2lSpec;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.CreateA2lResponse
 */
export interface CreateA2lResponse {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lEntity a2l = 1 [json_name = "a2l"];
   */
  a2L?: A2lEntity;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.GetA2lRequest
 */
export interface GetA2lRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.GetA2lResponse
 */
export interface GetA2lResponse {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lEntity a2l = 1 [json_name = "a2l"];
   */
  a2L?: A2lEntity;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.GetA2lMeasurementRequest
 */
export interface GetA2lMeasurementRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
  /**
   * @generated from protobuf field: string measurement_name = 2;
   */
  measurementName: string;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.GetA2lMeasurementResponse
 */
export interface GetA2lMeasurementResponse {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lMeasurement measurement = 1;
   */
  measurement?: A2lMeasurement;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.GetA2lCharacteristicRequest
 */
export interface GetA2lCharacteristicRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
  /**
   * @generated from protobuf field: string characteristic_name = 2;
   */
  characteristicName: string;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.GetA2lCharacteristicResponse
 */
export interface GetA2lCharacteristicResponse {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lFullCharacteristic characteristic = 1;
   */
  characteristic?: A2lFullCharacteristic;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.CreateSessionRequest
 */
export interface CreateSessionRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMetaSpec meta = 1;
   */
  meta?: EntityMetaSpec;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.SessionSpec spec = 2;
   */
  spec?: SessionSpec;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.CreateSessionResponse
 */
export interface CreateSessionResponse {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.SessionEntity session = 1;
   */
  session?: SessionEntity;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.GetSessionRequest
 */
export interface GetSessionRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.GetSessionResponse
 */
export interface GetSessionResponse {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.SessionEntity session = 1;
   */
  session?: SessionEntity;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.CommandRequest
 */
export interface CommandRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.CtoReq request = 2;
   */
  request?: CtoReq;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.CommandResponse
 */
export interface CommandResponse {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.CtoResp response = 2;
   */
  response?: CtoResp;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.ReadMeasurementRequest
 */
export interface ReadMeasurementRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector a2l_selector = 2 [json_name = "a2lSelector"];
   */
  a2LSelector?: EntitySelector;
  /**
   * @generated from protobuf field: string measurement_name = 3;
   */
  measurementName: string;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.ReadMeasurementResponse
 */
export interface ReadMeasurementResponse {
  /**
   * @generated from protobuf field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;
  /**
   * @generated from protobuf field: google.protobuf.Value value = 2;
   */
  value?: Value;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.ReadCharacteristicRequest
 */
export interface ReadCharacteristicRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector a2l_selector = 2 [json_name = "a2lSelector"];
   */
  a2LSelector?: EntitySelector;
  /**
   * @generated from protobuf field: string characteristic_name = 3;
   */
  characteristicName: string;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.ReadCharacteristicResponse
 */
export interface ReadCharacteristicResponse {
  /**
   * @generated from protobuf field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;
  /**
   * @generated from protobuf field: google.protobuf.Value value = 2;
   */
  value?: Value;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.WriteCharacteristicRequest
 */
export interface WriteCharacteristicRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector a2l_selector = 2 [json_name = "a2lSelector"];
   */
  a2LSelector?: EntitySelector;
  /**
   * @generated from protobuf field: string characteristic_name = 3;
   */
  characteristicName: string;
  /**
   * @generated from protobuf field: google.protobuf.Value value = 4;
   */
  value?: Value;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.WriteCharacteristicResponse
 */
export interface WriteCharacteristicResponse {}
// @generated message type with reflection information, may provide speed optimized methods
class CreateA2lRequest$Type extends MessageType<CreateA2lRequest> {
  constructor() {
    super("dipstick.xcp.v1.CreateA2lRequest", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMetaSpec },
      { no: 2, name: "spec", kind: "message", T: () => A2lSpec },
    ]);
  }
  create(value?: PartialMessage<CreateA2lRequest>): CreateA2lRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateA2lRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateA2lRequest,
  ): CreateA2lRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMetaSpec meta */ 1:
          message.meta = EntityMetaSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.xcp.v1.A2lSpec spec */ 2:
          message.spec = A2lSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateA2lRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMetaSpec meta = 1; */
    if (message.meta)
      EntityMetaSpec.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.A2lSpec spec = 2; */
    if (message.spec)
      A2lSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.CreateA2lRequest
 */
export const CreateA2lRequest = new CreateA2lRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateA2lResponse$Type extends MessageType<CreateA2lResponse> {
  constructor() {
    super("dipstick.xcp.v1.CreateA2lResponse", [
      {
        no: 1,
        name: "a2l",
        kind: "message",
        jsonName: "a2l",
        T: () => A2lEntity,
      },
    ]);
  }
  create(value?: PartialMessage<CreateA2lResponse>): CreateA2lResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateA2lResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateA2lResponse,
  ): CreateA2lResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.A2lEntity a2l = 1 [json_name = "a2l"];*/ 1:
          message.a2L = A2lEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.a2L,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateA2lResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.A2lEntity a2l = 1 [json_name = "a2l"]; */
    if (message.a2L)
      A2lEntity.internalBinaryWrite(
        message.a2L,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.CreateA2lResponse
 */
export const CreateA2lResponse = new CreateA2lResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetA2lRequest$Type extends MessageType<GetA2lRequest> {
  constructor() {
    super("dipstick.xcp.v1.GetA2lRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<GetA2lRequest>): GetA2lRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetA2lRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetA2lRequest,
  ): GetA2lRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetA2lRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.GetA2lRequest
 */
export const GetA2lRequest = new GetA2lRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetA2lResponse$Type extends MessageType<GetA2lResponse> {
  constructor() {
    super("dipstick.xcp.v1.GetA2lResponse", [
      {
        no: 1,
        name: "a2l",
        kind: "message",
        jsonName: "a2l",
        T: () => A2lEntity,
      },
    ]);
  }
  create(value?: PartialMessage<GetA2lResponse>): GetA2lResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetA2lResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetA2lResponse,
  ): GetA2lResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.A2lEntity a2l = 1 [json_name = "a2l"];*/ 1:
          message.a2L = A2lEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.a2L,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetA2lResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.A2lEntity a2l = 1 [json_name = "a2l"]; */
    if (message.a2L)
      A2lEntity.internalBinaryWrite(
        message.a2L,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.GetA2lResponse
 */
export const GetA2lResponse = new GetA2lResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetA2lMeasurementRequest$Type extends MessageType<GetA2lMeasurementRequest> {
  constructor() {
    super("dipstick.xcp.v1.GetA2lMeasurementRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
      {
        no: 2,
        name: "measurement_name",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<GetA2lMeasurementRequest>,
  ): GetA2lMeasurementRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.measurementName = "";
    if (value !== undefined)
      reflectionMergePartial<GetA2lMeasurementRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetA2lMeasurementRequest,
  ): GetA2lMeasurementRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        case /* string measurement_name */ 2:
          message.measurementName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetA2lMeasurementRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* string measurement_name = 2; */
    if (message.measurementName !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.measurementName);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.GetA2lMeasurementRequest
 */
export const GetA2lMeasurementRequest = new GetA2lMeasurementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetA2lMeasurementResponse$Type extends MessageType<GetA2lMeasurementResponse> {
  constructor() {
    super("dipstick.xcp.v1.GetA2lMeasurementResponse", [
      { no: 1, name: "measurement", kind: "message", T: () => A2lMeasurement },
    ]);
  }
  create(
    value?: PartialMessage<GetA2lMeasurementResponse>,
  ): GetA2lMeasurementResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetA2lMeasurementResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetA2lMeasurementResponse,
  ): GetA2lMeasurementResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.A2lMeasurement measurement */ 1:
          message.measurement = A2lMeasurement.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.measurement,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetA2lMeasurementResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.A2lMeasurement measurement = 1; */
    if (message.measurement)
      A2lMeasurement.internalBinaryWrite(
        message.measurement,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.GetA2lMeasurementResponse
 */
export const GetA2lMeasurementResponse = new GetA2lMeasurementResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetA2lCharacteristicRequest$Type extends MessageType<GetA2lCharacteristicRequest> {
  constructor() {
    super("dipstick.xcp.v1.GetA2lCharacteristicRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
      {
        no: 2,
        name: "characteristic_name",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<GetA2lCharacteristicRequest>,
  ): GetA2lCharacteristicRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.characteristicName = "";
    if (value !== undefined)
      reflectionMergePartial<GetA2lCharacteristicRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetA2lCharacteristicRequest,
  ): GetA2lCharacteristicRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        case /* string characteristic_name */ 2:
          message.characteristicName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetA2lCharacteristicRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* string characteristic_name = 2; */
    if (message.characteristicName !== "")
      writer
        .tag(2, WireType.LengthDelimited)
        .string(message.characteristicName);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.GetA2lCharacteristicRequest
 */
export const GetA2lCharacteristicRequest =
  new GetA2lCharacteristicRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetA2lCharacteristicResponse$Type extends MessageType<GetA2lCharacteristicResponse> {
  constructor() {
    super("dipstick.xcp.v1.GetA2lCharacteristicResponse", [
      {
        no: 1,
        name: "characteristic",
        kind: "message",
        T: () => A2lFullCharacteristic,
      },
    ]);
  }
  create(
    value?: PartialMessage<GetA2lCharacteristicResponse>,
  ): GetA2lCharacteristicResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetA2lCharacteristicResponse>(
        this,
        message,
        value,
      );
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetA2lCharacteristicResponse,
  ): GetA2lCharacteristicResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.A2lFullCharacteristic characteristic */ 1:
          message.characteristic = A2lFullCharacteristic.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.characteristic,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetA2lCharacteristicResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.A2lFullCharacteristic characteristic = 1; */
    if (message.characteristic)
      A2lFullCharacteristic.internalBinaryWrite(
        message.characteristic,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.GetA2lCharacteristicResponse
 */
export const GetA2lCharacteristicResponse =
  new GetA2lCharacteristicResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionRequest$Type extends MessageType<CreateSessionRequest> {
  constructor() {
    super("dipstick.xcp.v1.CreateSessionRequest", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMetaSpec },
      { no: 2, name: "spec", kind: "message", T: () => SessionSpec },
    ]);
  }
  create(value?: PartialMessage<CreateSessionRequest>): CreateSessionRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateSessionRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateSessionRequest,
  ): CreateSessionRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMetaSpec meta */ 1:
          message.meta = EntityMetaSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.xcp.v1.SessionSpec spec */ 2:
          message.spec = SessionSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateSessionRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMetaSpec meta = 1; */
    if (message.meta)
      EntityMetaSpec.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.SessionSpec spec = 2; */
    if (message.spec)
      SessionSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.CreateSessionRequest
 */
export const CreateSessionRequest = new CreateSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateSessionResponse$Type extends MessageType<CreateSessionResponse> {
  constructor() {
    super("dipstick.xcp.v1.CreateSessionResponse", [
      { no: 1, name: "session", kind: "message", T: () => SessionEntity },
    ]);
  }
  create(value?: PartialMessage<CreateSessionResponse>): CreateSessionResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateSessionResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateSessionResponse,
  ): CreateSessionResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.SessionEntity session */ 1:
          message.session = SessionEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.session,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateSessionResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.SessionEntity session = 1; */
    if (message.session)
      SessionEntity.internalBinaryWrite(
        message.session,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.CreateSessionResponse
 */
export const CreateSessionResponse = new CreateSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionRequest$Type extends MessageType<GetSessionRequest> {
  constructor() {
    super("dipstick.xcp.v1.GetSessionRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<GetSessionRequest>): GetSessionRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetSessionRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetSessionRequest,
  ): GetSessionRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetSessionRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.GetSessionRequest
 */
export const GetSessionRequest = new GetSessionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSessionResponse$Type extends MessageType<GetSessionResponse> {
  constructor() {
    super("dipstick.xcp.v1.GetSessionResponse", [
      { no: 1, name: "session", kind: "message", T: () => SessionEntity },
    ]);
  }
  create(value?: PartialMessage<GetSessionResponse>): GetSessionResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetSessionResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetSessionResponse,
  ): GetSessionResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.SessionEntity session */ 1:
          message.session = SessionEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.session,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetSessionResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.SessionEntity session = 1; */
    if (message.session)
      SessionEntity.internalBinaryWrite(
        message.session,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.GetSessionResponse
 */
export const GetSessionResponse = new GetSessionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandRequest$Type extends MessageType<CommandRequest> {
  constructor() {
    super("dipstick.xcp.v1.CommandRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
      { no: 2, name: "request", kind: "message", T: () => CtoReq },
    ]);
  }
  create(value?: PartialMessage<CommandRequest>): CommandRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CommandRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CommandRequest,
  ): CommandRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        case /* dipstick.xcp.v1.CtoReq request */ 2:
          message.request = CtoReq.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.request,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CommandRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.CtoReq request = 2; */
    if (message.request)
      CtoReq.internalBinaryWrite(
        message.request,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.CommandRequest
 */
export const CommandRequest = new CommandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommandResponse$Type extends MessageType<CommandResponse> {
  constructor() {
    super("dipstick.xcp.v1.CommandResponse", [
      { no: 2, name: "response", kind: "message", T: () => CtoResp },
    ]);
  }
  create(value?: PartialMessage<CommandResponse>): CommandResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CommandResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CommandResponse,
  ): CommandResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.CtoResp response */ 2:
          message.response = CtoResp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.response,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CommandResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.CtoResp response = 2; */
    if (message.response)
      CtoResp.internalBinaryWrite(
        message.response,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.CommandResponse
 */
export const CommandResponse = new CommandResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadMeasurementRequest$Type extends MessageType<ReadMeasurementRequest> {
  constructor() {
    super("dipstick.xcp.v1.ReadMeasurementRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
      {
        no: 2,
        name: "a2l_selector",
        kind: "message",
        jsonName: "a2lSelector",
        T: () => EntitySelector,
      },
      {
        no: 3,
        name: "measurement_name",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<ReadMeasurementRequest>,
  ): ReadMeasurementRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.measurementName = "";
    if (value !== undefined)
      reflectionMergePartial<ReadMeasurementRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReadMeasurementRequest,
  ): ReadMeasurementRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        case /* dipstick.core.v1.EntitySelector a2l_selector = 2 [json_name = "a2lSelector"];*/ 2:
          message.a2LSelector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.a2LSelector,
          );
          break;
        case /* string measurement_name */ 3:
          message.measurementName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ReadMeasurementRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.core.v1.EntitySelector a2l_selector = 2 [json_name = "a2lSelector"]; */
    if (message.a2LSelector)
      EntitySelector.internalBinaryWrite(
        message.a2LSelector,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* string measurement_name = 3; */
    if (message.measurementName !== "")
      writer.tag(3, WireType.LengthDelimited).string(message.measurementName);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.ReadMeasurementRequest
 */
export const ReadMeasurementRequest = new ReadMeasurementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadMeasurementResponse$Type extends MessageType<ReadMeasurementResponse> {
  constructor() {
    super("dipstick.xcp.v1.ReadMeasurementResponse", [
      { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
      { no: 2, name: "value", kind: "message", T: () => Value },
    ]);
  }
  create(
    value?: PartialMessage<ReadMeasurementResponse>,
  ): ReadMeasurementResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<ReadMeasurementResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReadMeasurementResponse,
  ): ReadMeasurementResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* google.protobuf.Timestamp timestamp */ 1:
          message.timestamp = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.timestamp,
          );
          break;
        case /* google.protobuf.Value value */ 2:
          message.value = Value.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.value,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ReadMeasurementResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* google.protobuf.Timestamp timestamp = 1; */
    if (message.timestamp)
      Timestamp.internalBinaryWrite(
        message.timestamp,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* google.protobuf.Value value = 2; */
    if (message.value)
      Value.internalBinaryWrite(
        message.value,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.ReadMeasurementResponse
 */
export const ReadMeasurementResponse = new ReadMeasurementResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadCharacteristicRequest$Type extends MessageType<ReadCharacteristicRequest> {
  constructor() {
    super("dipstick.xcp.v1.ReadCharacteristicRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
      {
        no: 2,
        name: "a2l_selector",
        kind: "message",
        jsonName: "a2lSelector",
        T: () => EntitySelector,
      },
      {
        no: 3,
        name: "characteristic_name",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(
    value?: PartialMessage<ReadCharacteristicRequest>,
  ): ReadCharacteristicRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.characteristicName = "";
    if (value !== undefined)
      reflectionMergePartial<ReadCharacteristicRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReadCharacteristicRequest,
  ): ReadCharacteristicRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        case /* dipstick.core.v1.EntitySelector a2l_selector = 2 [json_name = "a2lSelector"];*/ 2:
          message.a2LSelector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.a2LSelector,
          );
          break;
        case /* string characteristic_name */ 3:
          message.characteristicName = reader.string();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ReadCharacteristicRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.core.v1.EntitySelector a2l_selector = 2 [json_name = "a2lSelector"]; */
    if (message.a2LSelector)
      EntitySelector.internalBinaryWrite(
        message.a2LSelector,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* string characteristic_name = 3; */
    if (message.characteristicName !== "")
      writer
        .tag(3, WireType.LengthDelimited)
        .string(message.characteristicName);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.ReadCharacteristicRequest
 */
export const ReadCharacteristicRequest = new ReadCharacteristicRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadCharacteristicResponse$Type extends MessageType<ReadCharacteristicResponse> {
  constructor() {
    super("dipstick.xcp.v1.ReadCharacteristicResponse", [
      { no: 1, name: "timestamp", kind: "message", T: () => Timestamp },
      { no: 2, name: "value", kind: "message", T: () => Value },
    ]);
  }
  create(
    value?: PartialMessage<ReadCharacteristicResponse>,
  ): ReadCharacteristicResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<ReadCharacteristicResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ReadCharacteristicResponse,
  ): ReadCharacteristicResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* google.protobuf.Timestamp timestamp */ 1:
          message.timestamp = Timestamp.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.timestamp,
          );
          break;
        case /* google.protobuf.Value value */ 2:
          message.value = Value.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.value,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ReadCharacteristicResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* google.protobuf.Timestamp timestamp = 1; */
    if (message.timestamp)
      Timestamp.internalBinaryWrite(
        message.timestamp,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* google.protobuf.Value value = 2; */
    if (message.value)
      Value.internalBinaryWrite(
        message.value,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.ReadCharacteristicResponse
 */
export const ReadCharacteristicResponse = new ReadCharacteristicResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteCharacteristicRequest$Type extends MessageType<WriteCharacteristicRequest> {
  constructor() {
    super("dipstick.xcp.v1.WriteCharacteristicRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
      {
        no: 2,
        name: "a2l_selector",
        kind: "message",
        jsonName: "a2lSelector",
        T: () => EntitySelector,
      },
      {
        no: 3,
        name: "characteristic_name",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 4, name: "value", kind: "message", T: () => Value },
    ]);
  }
  create(
    value?: PartialMessage<WriteCharacteristicRequest>,
  ): WriteCharacteristicRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.characteristicName = "";
    if (value !== undefined)
      reflectionMergePartial<WriteCharacteristicRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: WriteCharacteristicRequest,
  ): WriteCharacteristicRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        case /* dipstick.core.v1.EntitySelector a2l_selector = 2 [json_name = "a2lSelector"];*/ 2:
          message.a2LSelector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.a2LSelector,
          );
          break;
        case /* string characteristic_name */ 3:
          message.characteristicName = reader.string();
          break;
        case /* google.protobuf.Value value */ 4:
          message.value = Value.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.value,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: WriteCharacteristicRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.core.v1.EntitySelector a2l_selector = 2 [json_name = "a2lSelector"]; */
    if (message.a2LSelector)
      EntitySelector.internalBinaryWrite(
        message.a2LSelector,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* string characteristic_name = 3; */
    if (message.characteristicName !== "")
      writer
        .tag(3, WireType.LengthDelimited)
        .string(message.characteristicName);
    /* google.protobuf.Value value = 4; */
    if (message.value)
      Value.internalBinaryWrite(
        message.value,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.WriteCharacteristicRequest
 */
export const WriteCharacteristicRequest = new WriteCharacteristicRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WriteCharacteristicResponse$Type extends MessageType<WriteCharacteristicResponse> {
  constructor() {
    super("dipstick.xcp.v1.WriteCharacteristicResponse", []);
  }
  create(
    value?: PartialMessage<WriteCharacteristicResponse>,
  ): WriteCharacteristicResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<WriteCharacteristicResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: WriteCharacteristicResponse,
  ): WriteCharacteristicResponse {
    return target ?? this.create();
  }
  internalBinaryWrite(
    message: WriteCharacteristicResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.WriteCharacteristicResponse
 */
export const WriteCharacteristicResponse =
  new WriteCharacteristicResponse$Type();
/**
 * @generated ServiceType for protobuf service dipstick.xcp.v1.XcpService
 */
export const XcpService = new ServiceType("dipstick.xcp.v1.XcpService", [
  { name: "CreateA2l", options: {}, I: CreateA2lRequest, O: CreateA2lResponse },
  { name: "GetA2l", options: {}, I: GetA2lRequest, O: GetA2lResponse },
  {
    name: "GetA2lMeasurement",
    options: {},
    I: GetA2lMeasurementRequest,
    O: GetA2lMeasurementResponse,
  },
  {
    name: "GetA2lCharacteristic",
    options: {},
    I: GetA2lCharacteristicRequest,
    O: GetA2lCharacteristicResponse,
  },
  {
    name: "CreateSession",
    options: {},
    I: CreateSessionRequest,
    O: CreateSessionResponse,
  },
  {
    name: "GetSession",
    options: {},
    I: GetSessionRequest,
    O: GetSessionResponse,
  },
  { name: "Command", options: {}, I: CommandRequest, O: CommandResponse },
  {
    name: "ReadMeasurement",
    options: {},
    I: ReadMeasurementRequest,
    O: ReadMeasurementResponse,
  },
  {
    name: "ReadCharacteristic",
    options: {},
    I: ReadCharacteristicRequest,
    O: ReadCharacteristicResponse,
  },
  {
    name: "WriteCharacteristic",
    options: {},
    I: WriteCharacteristicRequest,
    O: WriteCharacteristicResponse,
  },
]);
