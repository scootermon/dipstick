// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/xcp/v1/session.proto" (package "dipstick.xcp.v1", syntax proto3)
// tslint:disable
import { Duration } from "../../../google/protobuf/duration";
import { Id } from "../../can/v1/id";
import { EntitySelector } from "../../core/v1/entity";
import { EntityMeta } from "../../core/v1/entity";
import { CtoConnectRespData } from "./protocol";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";

/**
 * @generated from protobuf message dipstick.xcp.v1.SessionEntity
 */
export interface SessionEntity {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMeta meta = 1;
   */
  meta?: EntityMeta;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.SessionSpec spec = 2;
   */
  spec?: SessionSpec;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.SessionStatus status = 3;
   */
  status?: SessionStatus;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.SessionStatus
 */
export interface SessionStatus {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.CtoConnectRespData connect_data = 1;
   */
  connectData?: CtoConnectRespData;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.SessionSpec
 */
export interface SessionSpec {
  /**
   * @generated from protobuf field: optional bool no_auto_reconnect = 3;
   */
  noAutoReconnect?: boolean;
  /**
   * @generated from protobuf field: optional uint32 auto_connect_mode = 4;
   */
  autoConnectMode?: number;
  /**
   * Defaults to 500ms
   *
   * @generated from protobuf field: google.protobuf.Duration cto_timeout = 1;
   */
  ctoTimeout?: Duration;
  /**
   * @generated from protobuf oneof: xcp_transport_spec
   */
  xcpTransportSpec:
    | {
        oneofKind: "can";
        /**
         * @generated from protobuf field: dipstick.xcp.v1.CanTransportSpec can = 2;
         */
        can: CanTransportSpec;
      }
    | {
        oneofKind: undefined;
      };
}
/**
 * @generated from protobuf message dipstick.xcp.v1.CanTransportSpec
 */
export interface CanTransportSpec {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector bus = 1;
   */
  bus?: EntitySelector;
  /**
   * @generated from protobuf field: dipstick.can.v1.Id client_id = 2;
   */
  clientId?: Id;
  /**
   * @generated from protobuf field: dipstick.can.v1.Id server_id = 3;
   */
  serverId?: Id;
}
// @generated message type with reflection information, may provide speed optimized methods
class SessionEntity$Type extends MessageType<SessionEntity> {
  constructor() {
    super("dipstick.xcp.v1.SessionEntity", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMeta },
      { no: 2, name: "spec", kind: "message", T: () => SessionSpec },
      { no: 3, name: "status", kind: "message", T: () => SessionStatus },
    ]);
  }
  create(value?: PartialMessage<SessionEntity>): SessionEntity {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<SessionEntity>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SessionEntity,
  ): SessionEntity {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMeta meta */ 1:
          message.meta = EntityMeta.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.xcp.v1.SessionSpec spec */ 2:
          message.spec = SessionSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        case /* dipstick.xcp.v1.SessionStatus status */ 3:
          message.status = SessionStatus.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.status,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SessionEntity,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMeta meta = 1; */
    if (message.meta)
      EntityMeta.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.SessionSpec spec = 2; */
    if (message.spec)
      SessionSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.SessionStatus status = 3; */
    if (message.status)
      SessionStatus.internalBinaryWrite(
        message.status,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.SessionEntity
 */
export const SessionEntity = new SessionEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionStatus$Type extends MessageType<SessionStatus> {
  constructor() {
    super("dipstick.xcp.v1.SessionStatus", [
      {
        no: 1,
        name: "connect_data",
        kind: "message",
        T: () => CtoConnectRespData,
      },
    ]);
  }
  create(value?: PartialMessage<SessionStatus>): SessionStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<SessionStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SessionStatus,
  ): SessionStatus {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.CtoConnectRespData connect_data */ 1:
          message.connectData = CtoConnectRespData.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.connectData,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SessionStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.CtoConnectRespData connect_data = 1; */
    if (message.connectData)
      CtoConnectRespData.internalBinaryWrite(
        message.connectData,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.SessionStatus
 */
export const SessionStatus = new SessionStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SessionSpec$Type extends MessageType<SessionSpec> {
  constructor() {
    super("dipstick.xcp.v1.SessionSpec", [
      {
        no: 3,
        name: "no_auto_reconnect",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
      {
        no: 4,
        name: "auto_connect_mode",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      { no: 1, name: "cto_timeout", kind: "message", T: () => Duration },
      {
        no: 2,
        name: "can",
        kind: "message",
        oneof: "xcpTransportSpec",
        T: () => CanTransportSpec,
      },
    ]);
  }
  create(value?: PartialMessage<SessionSpec>): SessionSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.xcpTransportSpec = { oneofKind: undefined };
    if (value !== undefined)
      reflectionMergePartial<SessionSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: SessionSpec,
  ): SessionSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* optional bool no_auto_reconnect */ 3:
          message.noAutoReconnect = reader.bool();
          break;
        case /* optional uint32 auto_connect_mode */ 4:
          message.autoConnectMode = reader.uint32();
          break;
        case /* google.protobuf.Duration cto_timeout */ 1:
          message.ctoTimeout = Duration.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.ctoTimeout,
          );
          break;
        case /* dipstick.xcp.v1.CanTransportSpec can */ 2:
          message.xcpTransportSpec = {
            oneofKind: "can",
            can: CanTransportSpec.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.xcpTransportSpec as any).can,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: SessionSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* optional bool no_auto_reconnect = 3; */
    if (message.noAutoReconnect !== undefined)
      writer.tag(3, WireType.Varint).bool(message.noAutoReconnect);
    /* optional uint32 auto_connect_mode = 4; */
    if (message.autoConnectMode !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.autoConnectMode);
    /* google.protobuf.Duration cto_timeout = 1; */
    if (message.ctoTimeout)
      Duration.internalBinaryWrite(
        message.ctoTimeout,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.CanTransportSpec can = 2; */
    if (message.xcpTransportSpec.oneofKind === "can")
      CanTransportSpec.internalBinaryWrite(
        message.xcpTransportSpec.can,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.SessionSpec
 */
export const SessionSpec = new SessionSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CanTransportSpec$Type extends MessageType<CanTransportSpec> {
  constructor() {
    super("dipstick.xcp.v1.CanTransportSpec", [
      { no: 1, name: "bus", kind: "message", T: () => EntitySelector },
      { no: 2, name: "client_id", kind: "message", T: () => Id },
      { no: 3, name: "server_id", kind: "message", T: () => Id },
    ]);
  }
  create(value?: PartialMessage<CanTransportSpec>): CanTransportSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CanTransportSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CanTransportSpec,
  ): CanTransportSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector bus */ 1:
          message.bus = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.bus,
          );
          break;
        case /* dipstick.can.v1.Id client_id */ 2:
          message.clientId = Id.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.clientId,
          );
          break;
        case /* dipstick.can.v1.Id server_id */ 3:
          message.serverId = Id.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.serverId,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CanTransportSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector bus = 1; */
    if (message.bus)
      EntitySelector.internalBinaryWrite(
        message.bus,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.can.v1.Id client_id = 2; */
    if (message.clientId)
      Id.internalBinaryWrite(
        message.clientId,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.can.v1.Id server_id = 3; */
    if (message.serverId)
      Id.internalBinaryWrite(
        message.serverId,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.CanTransportSpec
 */
export const CanTransportSpec = new CanTransportSpec$Type();
