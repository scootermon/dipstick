// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/xcp/v1/a2l.proto" (package "dipstick.xcp.v1", syntax proto3)
// tslint:disable
import { EntityMeta } from "../../core/v1/entity";
import { File } from "../../core/v1/file";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";

/**
 * @generated from protobuf message dipstick.xcp.v1.A2lEntity
 */
export interface A2lEntity {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMeta meta = 1;
   */
  meta?: EntityMeta;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lSpec spec = 2;
   */
  spec?: A2lSpec;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lStatus status = 3;
   */
  status?: A2lStatus;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lStatus
 */
export interface A2lStatus {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lFile file = 2;
   */
  file?: A2lFile;
  /**
   * @generated from protobuf field: repeated string warnings = 1;
   */
  warnings: string[];
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lSpec
 */
export interface A2lSpec {
  /**
   * @generated from protobuf field: dipstick.core.v1.File file = 2;
   */
  file?: File;
  /**
   * @generated from protobuf field: optional string a2ml_spec = 1 [json_name = "a2mlSpec"];
   */
  a2MlSpec?: string;
  /**
   * @generated from protobuf field: optional bool strict_parsing = 3;
   */
  strictParsing?: boolean;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lFile
 */
export interface A2lFile {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lProject project = 1;
   */
  project?: A2lProject;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lProject
 */
export interface A2lProject {
  /**
   * @generated from protobuf field: repeated dipstick.xcp.v1.A2lModule module = 1;
   */
  module: A2lModule[];
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lModule
 */
export interface A2lModule {
  /**
   * @generated from protobuf field: repeated dipstick.xcp.v1.A2lCharacteristic characteristic = 2;
   */
  characteristic: A2lCharacteristic[];
  /**
   * @generated from protobuf field: repeated dipstick.xcp.v1.A2lMeasurement measurement = 1;
   */
  measurement: A2lMeasurement[];
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lModCommon mod_common = 4;
   */
  modCommon?: A2lModCommon;
  /**
   * @generated from protobuf field: repeated dipstick.xcp.v1.A2lRecordLayout record_layout = 3;
   */
  recordLayout: A2lRecordLayout[];
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lModCommon
 */
export interface A2lModCommon {
  /**
   * @generated from protobuf field: string comment = 1;
   */
  comment: string;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lByteOrder byte_order = 2;
   */
  byteOrder: A2lByteOrder;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lMeasurement
 */
export interface A2lMeasurement {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * @generated from protobuf field: string long_identifier = 2;
   */
  longIdentifier: string;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lDataType datatype = 3;
   */
  datatype: A2lDataType;
  /**
   * @generated from protobuf field: string conversion = 6;
   */
  conversion: string;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lByteOrder byte_order = 7;
   */
  byteOrder: A2lByteOrder;
  /**
   * @generated from protobuf field: optional uint32 ecu_address = 4;
   */
  ecuAddress?: number;
  /**
   * i16
   *
   * @generated from protobuf field: optional int32 ecu_address_extension = 5;
   */
  ecuAddressExtension?: number;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lCharacteristic
 */
export interface A2lCharacteristic {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * @generated from protobuf field: string long_identifier = 2;
   */
  longIdentifier: string;
  /**
   * @generated from protobuf field: uint32 address = 4;
   */
  address: number;
  /**
   * @generated from protobuf field: string deposit = 6;
   */
  deposit: string;
  /**
   * @generated from protobuf field: string conversion = 7;
   */
  conversion: string;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lByteOrder byte_order = 3;
   */
  byteOrder: A2lByteOrder;
  /**
   * i16
   *
   * @generated from protobuf field: optional int32 ecu_address_extension = 5;
   */
  ecuAddressExtension?: number;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lFullCharacteristic
 */
export interface A2lFullCharacteristic {
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lCharacteristic characteristic = 1;
   */
  characteristic?: A2lCharacteristic;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lRecordLayout record_layout = 2;
   */
  recordLayout?: A2lRecordLayout;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lRecordLayout
 */
export interface A2lRecordLayout {
  /**
   * @generated from protobuf field: string name = 1;
   */
  name: string;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lFncValues fnc_values = 2;
   */
  fncValues?: A2lFncValues;
}
/**
 * @generated from protobuf message dipstick.xcp.v1.A2lFncValues
 */
export interface A2lFncValues {
  /**
   * u16
   *
   * @generated from protobuf field: uint32 position = 1;
   */
  position: number;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lDataType datatype = 2;
   */
  datatype: A2lDataType;
  /**
   * @generated from protobuf field: dipstick.xcp.v1.A2lAddrType address_type = 4;
   */
  addressType: A2lAddrType;
}
/**
 * @generated from protobuf enum dipstick.xcp.v1.A2lDataType
 */
export enum A2lDataType {
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_UBYTE = 1;
   */
  UBYTE = 1,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_SBYTE = 2;
   */
  SBYTE = 2,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_UWORD = 3;
   */
  UWORD = 3,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_SWORD = 4;
   */
  SWORD = 4,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_ULONG = 5;
   */
  ULONG = 5,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_SLONG = 6;
   */
  SLONG = 6,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_A_UINT64 = 7;
   */
  A_UINT64 = 7,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_A_INT64 = 8;
   */
  A_INT64 = 8,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_F16_IEEE = 9;
   */
  F16_IEEE = 9,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_F32_IEEE = 10;
   */
  F32_IEEE = 10,
  /**
   * @generated from protobuf enum value: A2L_DATA_TYPE_F64_IEEE = 11;
   */
  F64_IEEE = 11,
}
/**
 * @generated from protobuf enum dipstick.xcp.v1.A2lByteOrder
 */
export enum A2lByteOrder {
  /**
   * @generated from protobuf enum value: A2L_BYTE_ORDER_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,
  /**
   * @generated from protobuf enum value: A2L_BYTE_ORDER_LITTLE_ENDIAN = 1;
   */
  LITTLE_ENDIAN = 1,
  /**
   * @generated from protobuf enum value: A2L_BYTE_ORDER_BIG_ENDIAN = 2;
   */
  BIG_ENDIAN = 2,
  /**
   * @generated from protobuf enum value: A2L_BYTE_ORDER_MSB_LAST = 3;
   */
  MSB_LAST = 3,
  /**
   * @generated from protobuf enum value: A2L_BYTE_ORDER_MSB_FIRST = 4;
   */
  MSB_FIRST = 4,
  /**
   * @generated from protobuf enum value: A2L_BYTE_ORDER_MSB_FIRST_MSW_LAST = 5;
   */
  MSB_FIRST_MSW_LAST = 5,
  /**
   * @generated from protobuf enum value: A2L_BYTE_ORDER_MSB_LAST_MSW_FIRST = 6;
   */
  MSB_LAST_MSW_FIRST = 6,
}
/**
 * @generated from protobuf enum dipstick.xcp.v1.A2lAddrType
 */
export enum A2lAddrType {
  /**
   * @generated from protobuf enum value: A2L_ADDR_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,
  /**
   * @generated from protobuf enum value: A2L_ADDR_TYPE_PBYTE = 1;
   */
  PBYTE = 1,
  /**
   * @generated from protobuf enum value: A2L_ADDR_TYPE_PWORD = 2;
   */
  PWORD = 2,
  /**
   * @generated from protobuf enum value: A2L_ADDR_TYPE_PLONG = 3;
   */
  PLONG = 3,
  /**
   * @generated from protobuf enum value: A2L_ADDR_TYPE_PLONGLONG = 4;
   */
  PLONGLONG = 4,
  /**
   * @generated from protobuf enum value: A2L_ADDR_TYPE_DIRECT = 5;
   */
  DIRECT = 5,
}
// @generated message type with reflection information, may provide speed optimized methods
class A2lEntity$Type extends MessageType<A2lEntity> {
  constructor() {
    super("dipstick.xcp.v1.A2lEntity", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMeta },
      { no: 2, name: "spec", kind: "message", T: () => A2lSpec },
      { no: 3, name: "status", kind: "message", T: () => A2lStatus },
    ]);
  }
  create(value?: PartialMessage<A2lEntity>): A2lEntity {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<A2lEntity>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lEntity,
  ): A2lEntity {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMeta meta */ 1:
          message.meta = EntityMeta.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.xcp.v1.A2lSpec spec */ 2:
          message.spec = A2lSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        case /* dipstick.xcp.v1.A2lStatus status */ 3:
          message.status = A2lStatus.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.status,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lEntity,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMeta meta = 1; */
    if (message.meta)
      EntityMeta.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.A2lSpec spec = 2; */
    if (message.spec)
      A2lSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.A2lStatus status = 3; */
    if (message.status)
      A2lStatus.internalBinaryWrite(
        message.status,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lEntity
 */
export const A2lEntity = new A2lEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lStatus$Type extends MessageType<A2lStatus> {
  constructor() {
    super("dipstick.xcp.v1.A2lStatus", [
      { no: 2, name: "file", kind: "message", T: () => A2lFile },
      {
        no: 1,
        name: "warnings",
        kind: "scalar",
        repeat: 2 /*RepeatType.UNPACKED*/,
        T: 9 /*ScalarType.STRING*/,
      },
    ]);
  }
  create(value?: PartialMessage<A2lStatus>): A2lStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.warnings = [];
    if (value !== undefined)
      reflectionMergePartial<A2lStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lStatus,
  ): A2lStatus {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.A2lFile file */ 2:
          message.file = A2lFile.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.file,
          );
          break;
        case /* repeated string warnings */ 1:
          message.warnings.push(reader.string());
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.A2lFile file = 2; */
    if (message.file)
      A2lFile.internalBinaryWrite(
        message.file,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated string warnings = 1; */
    for (let i = 0; i < message.warnings.length; i++)
      writer.tag(1, WireType.LengthDelimited).string(message.warnings[i]);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lStatus
 */
export const A2lStatus = new A2lStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lSpec$Type extends MessageType<A2lSpec> {
  constructor() {
    super("dipstick.xcp.v1.A2lSpec", [
      { no: 2, name: "file", kind: "message", T: () => File },
      {
        no: 1,
        name: "a2ml_spec",
        kind: "scalar",
        jsonName: "a2mlSpec",
        opt: true,
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "strict_parsing",
        kind: "scalar",
        opt: true,
        T: 8 /*ScalarType.BOOL*/,
      },
    ]);
  }
  create(value?: PartialMessage<A2lSpec>): A2lSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<A2lSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lSpec,
  ): A2lSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.File file */ 2:
          message.file = File.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.file,
          );
          break;
        case /* optional string a2ml_spec = 1 [json_name = "a2mlSpec"];*/ 1:
          message.a2MlSpec = reader.string();
          break;
        case /* optional bool strict_parsing */ 3:
          message.strictParsing = reader.bool();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.File file = 2; */
    if (message.file)
      File.internalBinaryWrite(
        message.file,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* optional string a2ml_spec = 1 [json_name = "a2mlSpec"]; */
    if (message.a2MlSpec !== undefined)
      writer.tag(1, WireType.LengthDelimited).string(message.a2MlSpec);
    /* optional bool strict_parsing = 3; */
    if (message.strictParsing !== undefined)
      writer.tag(3, WireType.Varint).bool(message.strictParsing);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lSpec
 */
export const A2lSpec = new A2lSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lFile$Type extends MessageType<A2lFile> {
  constructor() {
    super("dipstick.xcp.v1.A2lFile", [
      { no: 1, name: "project", kind: "message", T: () => A2lProject },
    ]);
  }
  create(value?: PartialMessage<A2lFile>): A2lFile {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<A2lFile>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lFile,
  ): A2lFile {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.A2lProject project */ 1:
          message.project = A2lProject.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.project,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lFile,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.A2lProject project = 1; */
    if (message.project)
      A2lProject.internalBinaryWrite(
        message.project,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lFile
 */
export const A2lFile = new A2lFile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lProject$Type extends MessageType<A2lProject> {
  constructor() {
    super("dipstick.xcp.v1.A2lProject", [
      {
        no: 1,
        name: "module",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => A2lModule,
      },
    ]);
  }
  create(value?: PartialMessage<A2lProject>): A2lProject {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.module = [];
    if (value !== undefined)
      reflectionMergePartial<A2lProject>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lProject,
  ): A2lProject {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated dipstick.xcp.v1.A2lModule module */ 1:
          message.module.push(
            A2lModule.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lProject,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated dipstick.xcp.v1.A2lModule module = 1; */
    for (let i = 0; i < message.module.length; i++)
      A2lModule.internalBinaryWrite(
        message.module[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lProject
 */
export const A2lProject = new A2lProject$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lModule$Type extends MessageType<A2lModule> {
  constructor() {
    super("dipstick.xcp.v1.A2lModule", [
      {
        no: 2,
        name: "characteristic",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => A2lCharacteristic,
      },
      {
        no: 1,
        name: "measurement",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => A2lMeasurement,
      },
      { no: 4, name: "mod_common", kind: "message", T: () => A2lModCommon },
      {
        no: 3,
        name: "record_layout",
        kind: "message",
        repeat: 1 /*RepeatType.PACKED*/,
        T: () => A2lRecordLayout,
      },
    ]);
  }
  create(value?: PartialMessage<A2lModule>): A2lModule {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.characteristic = [];
    message.measurement = [];
    message.recordLayout = [];
    if (value !== undefined)
      reflectionMergePartial<A2lModule>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lModule,
  ): A2lModule {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* repeated dipstick.xcp.v1.A2lCharacteristic characteristic */ 2:
          message.characteristic.push(
            A2lCharacteristic.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        case /* repeated dipstick.xcp.v1.A2lMeasurement measurement */ 1:
          message.measurement.push(
            A2lMeasurement.internalBinaryRead(reader, reader.uint32(), options),
          );
          break;
        case /* dipstick.xcp.v1.A2lModCommon mod_common */ 4:
          message.modCommon = A2lModCommon.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.modCommon,
          );
          break;
        case /* repeated dipstick.xcp.v1.A2lRecordLayout record_layout */ 3:
          message.recordLayout.push(
            A2lRecordLayout.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
            ),
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lModule,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* repeated dipstick.xcp.v1.A2lCharacteristic characteristic = 2; */
    for (let i = 0; i < message.characteristic.length; i++)
      A2lCharacteristic.internalBinaryWrite(
        message.characteristic[i],
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated dipstick.xcp.v1.A2lMeasurement measurement = 1; */
    for (let i = 0; i < message.measurement.length; i++)
      A2lMeasurement.internalBinaryWrite(
        message.measurement[i],
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.A2lModCommon mod_common = 4; */
    if (message.modCommon)
      A2lModCommon.internalBinaryWrite(
        message.modCommon,
        writer.tag(4, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* repeated dipstick.xcp.v1.A2lRecordLayout record_layout = 3; */
    for (let i = 0; i < message.recordLayout.length; i++)
      A2lRecordLayout.internalBinaryWrite(
        message.recordLayout[i],
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lModule
 */
export const A2lModule = new A2lModule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lModCommon$Type extends MessageType<A2lModCommon> {
  constructor() {
    super("dipstick.xcp.v1.A2lModCommon", [
      { no: 1, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "byte_order",
        kind: "enum",
        T: () => [
          "dipstick.xcp.v1.A2lByteOrder",
          A2lByteOrder,
          "A2L_BYTE_ORDER_",
        ],
      },
    ]);
  }
  create(value?: PartialMessage<A2lModCommon>): A2lModCommon {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.comment = "";
    message.byteOrder = 0;
    if (value !== undefined)
      reflectionMergePartial<A2lModCommon>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lModCommon,
  ): A2lModCommon {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string comment */ 1:
          message.comment = reader.string();
          break;
        case /* dipstick.xcp.v1.A2lByteOrder byte_order */ 2:
          message.byteOrder = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lModCommon,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string comment = 1; */
    if (message.comment !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.comment);
    /* dipstick.xcp.v1.A2lByteOrder byte_order = 2; */
    if (message.byteOrder !== 0)
      writer.tag(2, WireType.Varint).int32(message.byteOrder);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lModCommon
 */
export const A2lModCommon = new A2lModCommon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lMeasurement$Type extends MessageType<A2lMeasurement> {
  constructor() {
    super("dipstick.xcp.v1.A2lMeasurement", [
      { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "long_identifier",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
      {
        no: 3,
        name: "datatype",
        kind: "enum",
        T: () => ["dipstick.xcp.v1.A2lDataType", A2lDataType, "A2L_DATA_TYPE_"],
      },
      { no: 6, name: "conversion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 7,
        name: "byte_order",
        kind: "enum",
        T: () => [
          "dipstick.xcp.v1.A2lByteOrder",
          A2lByteOrder,
          "A2L_BYTE_ORDER_",
        ],
      },
      {
        no: 4,
        name: "ecu_address",
        kind: "scalar",
        opt: true,
        T: 13 /*ScalarType.UINT32*/,
      },
      {
        no: 5,
        name: "ecu_address_extension",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<A2lMeasurement>): A2lMeasurement {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = "";
    message.longIdentifier = "";
    message.datatype = 0;
    message.conversion = "";
    message.byteOrder = 0;
    if (value !== undefined)
      reflectionMergePartial<A2lMeasurement>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lMeasurement,
  ): A2lMeasurement {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* string long_identifier */ 2:
          message.longIdentifier = reader.string();
          break;
        case /* dipstick.xcp.v1.A2lDataType datatype */ 3:
          message.datatype = reader.int32();
          break;
        case /* string conversion */ 6:
          message.conversion = reader.string();
          break;
        case /* dipstick.xcp.v1.A2lByteOrder byte_order */ 7:
          message.byteOrder = reader.int32();
          break;
        case /* optional uint32 ecu_address */ 4:
          message.ecuAddress = reader.uint32();
          break;
        case /* optional int32 ecu_address_extension */ 5:
          message.ecuAddressExtension = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lMeasurement,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* string long_identifier = 2; */
    if (message.longIdentifier !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.longIdentifier);
    /* dipstick.xcp.v1.A2lDataType datatype = 3; */
    if (message.datatype !== 0)
      writer.tag(3, WireType.Varint).int32(message.datatype);
    /* string conversion = 6; */
    if (message.conversion !== "")
      writer.tag(6, WireType.LengthDelimited).string(message.conversion);
    /* dipstick.xcp.v1.A2lByteOrder byte_order = 7; */
    if (message.byteOrder !== 0)
      writer.tag(7, WireType.Varint).int32(message.byteOrder);
    /* optional uint32 ecu_address = 4; */
    if (message.ecuAddress !== undefined)
      writer.tag(4, WireType.Varint).uint32(message.ecuAddress);
    /* optional int32 ecu_address_extension = 5; */
    if (message.ecuAddressExtension !== undefined)
      writer.tag(5, WireType.Varint).int32(message.ecuAddressExtension);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lMeasurement
 */
export const A2lMeasurement = new A2lMeasurement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lCharacteristic$Type extends MessageType<A2lCharacteristic> {
  constructor() {
    super("dipstick.xcp.v1.A2lCharacteristic", [
      { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 2,
        name: "long_identifier",
        kind: "scalar",
        T: 9 /*ScalarType.STRING*/,
      },
      { no: 4, name: "address", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
      { no: 6, name: "deposit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 7, name: "conversion", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      {
        no: 3,
        name: "byte_order",
        kind: "enum",
        T: () => [
          "dipstick.xcp.v1.A2lByteOrder",
          A2lByteOrder,
          "A2L_BYTE_ORDER_",
        ],
      },
      {
        no: 5,
        name: "ecu_address_extension",
        kind: "scalar",
        opt: true,
        T: 5 /*ScalarType.INT32*/,
      },
    ]);
  }
  create(value?: PartialMessage<A2lCharacteristic>): A2lCharacteristic {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = "";
    message.longIdentifier = "";
    message.address = 0;
    message.deposit = "";
    message.conversion = "";
    message.byteOrder = 0;
    if (value !== undefined)
      reflectionMergePartial<A2lCharacteristic>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lCharacteristic,
  ): A2lCharacteristic {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* string long_identifier */ 2:
          message.longIdentifier = reader.string();
          break;
        case /* uint32 address */ 4:
          message.address = reader.uint32();
          break;
        case /* string deposit */ 6:
          message.deposit = reader.string();
          break;
        case /* string conversion */ 7:
          message.conversion = reader.string();
          break;
        case /* dipstick.xcp.v1.A2lByteOrder byte_order */ 3:
          message.byteOrder = reader.int32();
          break;
        case /* optional int32 ecu_address_extension */ 5:
          message.ecuAddressExtension = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lCharacteristic,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* string long_identifier = 2; */
    if (message.longIdentifier !== "")
      writer.tag(2, WireType.LengthDelimited).string(message.longIdentifier);
    /* uint32 address = 4; */
    if (message.address !== 0)
      writer.tag(4, WireType.Varint).uint32(message.address);
    /* string deposit = 6; */
    if (message.deposit !== "")
      writer.tag(6, WireType.LengthDelimited).string(message.deposit);
    /* string conversion = 7; */
    if (message.conversion !== "")
      writer.tag(7, WireType.LengthDelimited).string(message.conversion);
    /* dipstick.xcp.v1.A2lByteOrder byte_order = 3; */
    if (message.byteOrder !== 0)
      writer.tag(3, WireType.Varint).int32(message.byteOrder);
    /* optional int32 ecu_address_extension = 5; */
    if (message.ecuAddressExtension !== undefined)
      writer.tag(5, WireType.Varint).int32(message.ecuAddressExtension);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lCharacteristic
 */
export const A2lCharacteristic = new A2lCharacteristic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lFullCharacteristic$Type extends MessageType<A2lFullCharacteristic> {
  constructor() {
    super("dipstick.xcp.v1.A2lFullCharacteristic", [
      {
        no: 1,
        name: "characteristic",
        kind: "message",
        T: () => A2lCharacteristic,
      },
      {
        no: 2,
        name: "record_layout",
        kind: "message",
        T: () => A2lRecordLayout,
      },
    ]);
  }
  create(value?: PartialMessage<A2lFullCharacteristic>): A2lFullCharacteristic {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<A2lFullCharacteristic>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lFullCharacteristic,
  ): A2lFullCharacteristic {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.xcp.v1.A2lCharacteristic characteristic */ 1:
          message.characteristic = A2lCharacteristic.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.characteristic,
          );
          break;
        case /* dipstick.xcp.v1.A2lRecordLayout record_layout */ 2:
          message.recordLayout = A2lRecordLayout.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.recordLayout,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lFullCharacteristic,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.xcp.v1.A2lCharacteristic characteristic = 1; */
    if (message.characteristic)
      A2lCharacteristic.internalBinaryWrite(
        message.characteristic,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.xcp.v1.A2lRecordLayout record_layout = 2; */
    if (message.recordLayout)
      A2lRecordLayout.internalBinaryWrite(
        message.recordLayout,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lFullCharacteristic
 */
export const A2lFullCharacteristic = new A2lFullCharacteristic$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lRecordLayout$Type extends MessageType<A2lRecordLayout> {
  constructor() {
    super("dipstick.xcp.v1.A2lRecordLayout", [
      { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
      { no: 2, name: "fnc_values", kind: "message", T: () => A2lFncValues },
    ]);
  }
  create(value?: PartialMessage<A2lRecordLayout>): A2lRecordLayout {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.name = "";
    if (value !== undefined)
      reflectionMergePartial<A2lRecordLayout>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lRecordLayout,
  ): A2lRecordLayout {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* string name */ 1:
          message.name = reader.string();
          break;
        case /* dipstick.xcp.v1.A2lFncValues fnc_values */ 2:
          message.fncValues = A2lFncValues.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.fncValues,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lRecordLayout,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* string name = 1; */
    if (message.name !== "")
      writer.tag(1, WireType.LengthDelimited).string(message.name);
    /* dipstick.xcp.v1.A2lFncValues fnc_values = 2; */
    if (message.fncValues)
      A2lFncValues.internalBinaryWrite(
        message.fncValues,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lRecordLayout
 */
export const A2lRecordLayout = new A2lRecordLayout$Type();
// @generated message type with reflection information, may provide speed optimized methods
class A2lFncValues$Type extends MessageType<A2lFncValues> {
  constructor() {
    super("dipstick.xcp.v1.A2lFncValues", [
      { no: 1, name: "position", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
      {
        no: 2,
        name: "datatype",
        kind: "enum",
        T: () => ["dipstick.xcp.v1.A2lDataType", A2lDataType, "A2L_DATA_TYPE_"],
      },
      {
        no: 4,
        name: "address_type",
        kind: "enum",
        T: () => ["dipstick.xcp.v1.A2lAddrType", A2lAddrType, "A2L_ADDR_TYPE_"],
      },
    ]);
  }
  create(value?: PartialMessage<A2lFncValues>): A2lFncValues {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.position = 0;
    message.datatype = 0;
    message.addressType = 0;
    if (value !== undefined)
      reflectionMergePartial<A2lFncValues>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: A2lFncValues,
  ): A2lFncValues {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* uint32 position */ 1:
          message.position = reader.uint32();
          break;
        case /* dipstick.xcp.v1.A2lDataType datatype */ 2:
          message.datatype = reader.int32();
          break;
        case /* dipstick.xcp.v1.A2lAddrType address_type */ 4:
          message.addressType = reader.int32();
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: A2lFncValues,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* uint32 position = 1; */
    if (message.position !== 0)
      writer.tag(1, WireType.Varint).uint32(message.position);
    /* dipstick.xcp.v1.A2lDataType datatype = 2; */
    if (message.datatype !== 0)
      writer.tag(2, WireType.Varint).int32(message.datatype);
    /* dipstick.xcp.v1.A2lAddrType address_type = 4; */
    if (message.addressType !== 0)
      writer.tag(4, WireType.Varint).int32(message.addressType);
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.xcp.v1.A2lFncValues
 */
export const A2lFncValues = new A2lFncValues$Type();
