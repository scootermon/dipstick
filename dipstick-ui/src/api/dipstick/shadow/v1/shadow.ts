// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/shadow/v1/shadow.proto" (package "dipstick.shadow.v1", syntax proto3)
// tslint:disable
import { EntityMeta } from "../../core/v1/entity";
import { SignalEvent } from "./signal";
import { SignalStatus } from "./signal";
import { SignalSpec } from "./signal";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";

/**
 * @generated from protobuf message dipstick.shadow.v1.ShadowEntity
 */
export interface ShadowEntity {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMeta meta = 1;
   */
  meta?: EntityMeta;
  /**
   * @generated from protobuf field: dipstick.shadow.v1.ShadowSpec spec = 2;
   */
  spec?: ShadowSpec;
  /**
   * @generated from protobuf field: dipstick.shadow.v1.ShadowStatus status = 3;
   */
  status?: ShadowStatus;
}
/**
 * @generated from protobuf message dipstick.shadow.v1.ShadowSpec
 */
export interface ShadowSpec {
  /**
   * @generated from protobuf field: map<string, dipstick.shadow.v1.SignalSpec> signals = 2;
   */
  signals: {
    [key: string]: SignalSpec;
  };
}
/**
 * @generated from protobuf message dipstick.shadow.v1.ShadowStatus
 */
export interface ShadowStatus {
  /**
   * @generated from protobuf field: map<string, dipstick.shadow.v1.SignalStatus> signals = 1;
   */
  signals: {
    [key: string]: SignalStatus;
  };
}
/**
 * @generated from protobuf message dipstick.shadow.v1.ShadowEvent
 */
export interface ShadowEvent {
  /**
   * @generated from protobuf oneof: shadow_event_variant
   */
  shadowEventVariant:
    | {
        oneofKind: "signal";
        /**
         * @generated from protobuf field: dipstick.shadow.v1.SignalEvent signal = 1;
         */
        signal: SignalEvent;
      }
    | {
        oneofKind: undefined;
      };
}
// @generated message type with reflection information, may provide speed optimized methods
class ShadowEntity$Type extends MessageType<ShadowEntity> {
  constructor() {
    super("dipstick.shadow.v1.ShadowEntity", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMeta },
      { no: 2, name: "spec", kind: "message", T: () => ShadowSpec },
      { no: 3, name: "status", kind: "message", T: () => ShadowStatus },
    ]);
  }
  create(value?: PartialMessage<ShadowEntity>): ShadowEntity {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<ShadowEntity>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ShadowEntity,
  ): ShadowEntity {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMeta meta */ 1:
          message.meta = EntityMeta.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.shadow.v1.ShadowSpec spec */ 2:
          message.spec = ShadowSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        case /* dipstick.shadow.v1.ShadowStatus status */ 3:
          message.status = ShadowStatus.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.status,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ShadowEntity,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMeta meta = 1; */
    if (message.meta)
      EntityMeta.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.shadow.v1.ShadowSpec spec = 2; */
    if (message.spec)
      ShadowSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.shadow.v1.ShadowStatus status = 3; */
    if (message.status)
      ShadowStatus.internalBinaryWrite(
        message.status,
        writer.tag(3, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.ShadowEntity
 */
export const ShadowEntity = new ShadowEntity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShadowSpec$Type extends MessageType<ShadowSpec> {
  constructor() {
    super("dipstick.shadow.v1.ShadowSpec", [
      {
        no: 2,
        name: "signals",
        kind: "map",
        K: 9 /*ScalarType.STRING*/,
        V: { kind: "message", T: () => SignalSpec },
      },
    ]);
  }
  create(value?: PartialMessage<ShadowSpec>): ShadowSpec {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.signals = {};
    if (value !== undefined)
      reflectionMergePartial<ShadowSpec>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ShadowSpec,
  ): ShadowSpec {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* map<string, dipstick.shadow.v1.SignalSpec> signals */ 2:
          this.binaryReadMap2(message.signals, reader, options);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  private binaryReadMap2(
    map: ShadowSpec["signals"],
    reader: IBinaryReader,
    options: BinaryReadOptions,
  ): void {
    let len = reader.uint32(),
      end = reader.pos + len,
      key: keyof ShadowSpec["signals"] | undefined,
      val: ShadowSpec["signals"][any] | undefined;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = reader.string();
          break;
        case 2:
          val = SignalSpec.internalBinaryRead(reader, reader.uint32(), options);
          break;
        default:
          throw new globalThis.Error(
            "unknown map entry field for field dipstick.shadow.v1.ShadowSpec.signals",
          );
      }
    }
    map[key ?? ""] = val ?? SignalSpec.create();
  }
  internalBinaryWrite(
    message: ShadowSpec,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* map<string, dipstick.shadow.v1.SignalSpec> signals = 2; */
    for (let k of globalThis.Object.keys(message.signals)) {
      writer
        .tag(2, WireType.LengthDelimited)
        .fork()
        .tag(1, WireType.LengthDelimited)
        .string(k);
      writer.tag(2, WireType.LengthDelimited).fork();
      SignalSpec.internalBinaryWrite(message.signals[k], writer, options);
      writer.join().join();
    }
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.ShadowSpec
 */
export const ShadowSpec = new ShadowSpec$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShadowStatus$Type extends MessageType<ShadowStatus> {
  constructor() {
    super("dipstick.shadow.v1.ShadowStatus", [
      {
        no: 1,
        name: "signals",
        kind: "map",
        K: 9 /*ScalarType.STRING*/,
        V: { kind: "message", T: () => SignalStatus },
      },
    ]);
  }
  create(value?: PartialMessage<ShadowStatus>): ShadowStatus {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.signals = {};
    if (value !== undefined)
      reflectionMergePartial<ShadowStatus>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ShadowStatus,
  ): ShadowStatus {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* map<string, dipstick.shadow.v1.SignalStatus> signals */ 1:
          this.binaryReadMap1(message.signals, reader, options);
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  private binaryReadMap1(
    map: ShadowStatus["signals"],
    reader: IBinaryReader,
    options: BinaryReadOptions,
  ): void {
    let len = reader.uint32(),
      end = reader.pos + len,
      key: keyof ShadowStatus["signals"] | undefined,
      val: ShadowStatus["signals"][any] | undefined;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = reader.string();
          break;
        case 2:
          val = SignalStatus.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
          );
          break;
        default:
          throw new globalThis.Error(
            "unknown map entry field for field dipstick.shadow.v1.ShadowStatus.signals",
          );
      }
    }
    map[key ?? ""] = val ?? SignalStatus.create();
  }
  internalBinaryWrite(
    message: ShadowStatus,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* map<string, dipstick.shadow.v1.SignalStatus> signals = 1; */
    for (let k of globalThis.Object.keys(message.signals)) {
      writer
        .tag(1, WireType.LengthDelimited)
        .fork()
        .tag(1, WireType.LengthDelimited)
        .string(k);
      writer.tag(2, WireType.LengthDelimited).fork();
      SignalStatus.internalBinaryWrite(message.signals[k], writer, options);
      writer.join().join();
    }
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.ShadowStatus
 */
export const ShadowStatus = new ShadowStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShadowEvent$Type extends MessageType<ShadowEvent> {
  constructor() {
    super("dipstick.shadow.v1.ShadowEvent", [
      {
        no: 1,
        name: "signal",
        kind: "message",
        oneof: "shadowEventVariant",
        T: () => SignalEvent,
      },
    ]);
  }
  create(value?: PartialMessage<ShadowEvent>): ShadowEvent {
    const message = globalThis.Object.create(this.messagePrototype!);
    message.shadowEventVariant = { oneofKind: undefined };
    if (value !== undefined)
      reflectionMergePartial<ShadowEvent>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ShadowEvent,
  ): ShadowEvent {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.shadow.v1.SignalEvent signal */ 1:
          message.shadowEventVariant = {
            oneofKind: "signal",
            signal: SignalEvent.internalBinaryRead(
              reader,
              reader.uint32(),
              options,
              (message.shadowEventVariant as any).signal,
            ),
          };
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ShadowEvent,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.shadow.v1.SignalEvent signal = 1; */
    if (message.shadowEventVariant.oneofKind === "signal")
      SignalEvent.internalBinaryWrite(
        message.shadowEventVariant.signal,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.ShadowEvent
 */
export const ShadowEvent = new ShadowEvent$Type();
