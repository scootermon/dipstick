// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/shadow/v1/service.proto" (package "dipstick.shadow.v1", syntax proto3)
// tslint:disable
import { EntitySelector } from "../../core/v1/entity";
import { EntityMetaSpec } from "../../core/v1/entity";
import { ShadowEvent } from "./shadow";
import { ShadowEntity } from "./shadow";
import { ShadowSpec } from "./shadow";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServiceType } from "@protobuf-ts/runtime-rpc";

/**
 * @generated from protobuf message dipstick.shadow.v1.CreateShadowRequest
 */
export interface CreateShadowRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntityMetaSpec meta = 1;
   */
  meta?: EntityMetaSpec;
  /**
   * @generated from protobuf field: dipstick.shadow.v1.ShadowSpec spec = 2;
   */
  spec?: ShadowSpec;
}
/**
 * @generated from protobuf message dipstick.shadow.v1.CreateShadowResponse
 */
export interface CreateShadowResponse {
  /**
   * @generated from protobuf field: dipstick.shadow.v1.ShadowEntity shadow = 1;
   */
  shadow?: ShadowEntity;
}
/**
 * @generated from protobuf message dipstick.shadow.v1.GetShadowRequest
 */
export interface GetShadowRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.shadow.v1.GetShadowResponse
 */
export interface GetShadowResponse {
  /**
   * @generated from protobuf field: dipstick.shadow.v1.ShadowEntity shadow = 1;
   */
  shadow?: ShadowEntity;
}
/**
 * @generated from protobuf message dipstick.shadow.v1.ShadowEventsRequest
 */
export interface ShadowEventsRequest {
  /**
   * @generated from protobuf field: dipstick.core.v1.EntitySelector selector = 1;
   */
  selector?: EntitySelector;
}
/**
 * @generated from protobuf message dipstick.shadow.v1.ShadowEventsResponse
 */
export interface ShadowEventsResponse {
  /**
   * @generated from protobuf field: dipstick.shadow.v1.ShadowEvent event = 1;
   */
  event?: ShadowEvent;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateShadowRequest$Type extends MessageType<CreateShadowRequest> {
  constructor() {
    super("dipstick.shadow.v1.CreateShadowRequest", [
      { no: 1, name: "meta", kind: "message", T: () => EntityMetaSpec },
      { no: 2, name: "spec", kind: "message", T: () => ShadowSpec },
    ]);
  }
  create(value?: PartialMessage<CreateShadowRequest>): CreateShadowRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateShadowRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateShadowRequest,
  ): CreateShadowRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntityMetaSpec meta */ 1:
          message.meta = EntityMetaSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.meta,
          );
          break;
        case /* dipstick.shadow.v1.ShadowSpec spec */ 2:
          message.spec = ShadowSpec.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.spec,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateShadowRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntityMetaSpec meta = 1; */
    if (message.meta)
      EntityMetaSpec.internalBinaryWrite(
        message.meta,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    /* dipstick.shadow.v1.ShadowSpec spec = 2; */
    if (message.spec)
      ShadowSpec.internalBinaryWrite(
        message.spec,
        writer.tag(2, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.CreateShadowRequest
 */
export const CreateShadowRequest = new CreateShadowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateShadowResponse$Type extends MessageType<CreateShadowResponse> {
  constructor() {
    super("dipstick.shadow.v1.CreateShadowResponse", [
      { no: 1, name: "shadow", kind: "message", T: () => ShadowEntity },
    ]);
  }
  create(value?: PartialMessage<CreateShadowResponse>): CreateShadowResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<CreateShadowResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: CreateShadowResponse,
  ): CreateShadowResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.shadow.v1.ShadowEntity shadow */ 1:
          message.shadow = ShadowEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.shadow,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: CreateShadowResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.shadow.v1.ShadowEntity shadow = 1; */
    if (message.shadow)
      ShadowEntity.internalBinaryWrite(
        message.shadow,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.CreateShadowResponse
 */
export const CreateShadowResponse = new CreateShadowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetShadowRequest$Type extends MessageType<GetShadowRequest> {
  constructor() {
    super("dipstick.shadow.v1.GetShadowRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<GetShadowRequest>): GetShadowRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetShadowRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetShadowRequest,
  ): GetShadowRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetShadowRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.GetShadowRequest
 */
export const GetShadowRequest = new GetShadowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetShadowResponse$Type extends MessageType<GetShadowResponse> {
  constructor() {
    super("dipstick.shadow.v1.GetShadowResponse", [
      { no: 1, name: "shadow", kind: "message", T: () => ShadowEntity },
    ]);
  }
  create(value?: PartialMessage<GetShadowResponse>): GetShadowResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<GetShadowResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: GetShadowResponse,
  ): GetShadowResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.shadow.v1.ShadowEntity shadow */ 1:
          message.shadow = ShadowEntity.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.shadow,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: GetShadowResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.shadow.v1.ShadowEntity shadow = 1; */
    if (message.shadow)
      ShadowEntity.internalBinaryWrite(
        message.shadow,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.GetShadowResponse
 */
export const GetShadowResponse = new GetShadowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShadowEventsRequest$Type extends MessageType<ShadowEventsRequest> {
  constructor() {
    super("dipstick.shadow.v1.ShadowEventsRequest", [
      { no: 1, name: "selector", kind: "message", T: () => EntitySelector },
    ]);
  }
  create(value?: PartialMessage<ShadowEventsRequest>): ShadowEventsRequest {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<ShadowEventsRequest>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ShadowEventsRequest,
  ): ShadowEventsRequest {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.core.v1.EntitySelector selector */ 1:
          message.selector = EntitySelector.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.selector,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ShadowEventsRequest,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.core.v1.EntitySelector selector = 1; */
    if (message.selector)
      EntitySelector.internalBinaryWrite(
        message.selector,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.ShadowEventsRequest
 */
export const ShadowEventsRequest = new ShadowEventsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShadowEventsResponse$Type extends MessageType<ShadowEventsResponse> {
  constructor() {
    super("dipstick.shadow.v1.ShadowEventsResponse", [
      { no: 1, name: "event", kind: "message", T: () => ShadowEvent },
    ]);
  }
  create(value?: PartialMessage<ShadowEventsResponse>): ShadowEventsResponse {
    const message = globalThis.Object.create(this.messagePrototype!);
    if (value !== undefined)
      reflectionMergePartial<ShadowEventsResponse>(this, message, value);
    return message;
  }
  internalBinaryRead(
    reader: IBinaryReader,
    length: number,
    options: BinaryReadOptions,
    target?: ShadowEventsResponse,
  ): ShadowEventsResponse {
    let message = target ?? this.create(),
      end = reader.pos + length;
    while (reader.pos < end) {
      let [fieldNo, wireType] = reader.tag();
      switch (fieldNo) {
        case /* dipstick.shadow.v1.ShadowEvent event */ 1:
          message.event = ShadowEvent.internalBinaryRead(
            reader,
            reader.uint32(),
            options,
            message.event,
          );
          break;
        default:
          let u = options.readUnknownField;
          if (u === "throw")
            throw new globalThis.Error(
              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,
            );
          let d = reader.skip(wireType);
          if (u !== false)
            (u === true ? UnknownFieldHandler.onRead : u)(
              this.typeName,
              message,
              fieldNo,
              wireType,
              d,
            );
      }
    }
    return message;
  }
  internalBinaryWrite(
    message: ShadowEventsResponse,
    writer: IBinaryWriter,
    options: BinaryWriteOptions,
  ): IBinaryWriter {
    /* dipstick.shadow.v1.ShadowEvent event = 1; */
    if (message.event)
      ShadowEvent.internalBinaryWrite(
        message.event,
        writer.tag(1, WireType.LengthDelimited).fork(),
        options,
      ).join();
    let u = options.writeUnknownFields;
    if (u !== false)
      (u == true ? UnknownFieldHandler.onWrite : u)(
        this.typeName,
        message,
        writer,
      );
    return writer;
  }
}
/**
 * @generated MessageType for protobuf message dipstick.shadow.v1.ShadowEventsResponse
 */
export const ShadowEventsResponse = new ShadowEventsResponse$Type();
/**
 * @generated ServiceType for protobuf service dipstick.shadow.v1.ShadowService
 */
export const ShadowService = new ServiceType(
  "dipstick.shadow.v1.ShadowService",
  [
    {
      name: "CreateShadow",
      options: {},
      I: CreateShadowRequest,
      O: CreateShadowResponse,
    },
    {
      name: "GetShadow",
      options: {},
      I: GetShadowRequest,
      O: GetShadowResponse,
    },
    {
      name: "ShadowEvents",
      serverStreaming: true,
      options: {},
      I: ShadowEventsRequest,
      O: ShadowEventsResponse,
    },
  ],
);
