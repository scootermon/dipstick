// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "dipstick/stack/v1/service.proto" (package "dipstick.stack.v1", syntax proto3)
// tslint:disable
import { StackService } from "./service";
import type { GetStackResponse } from "./service";
import type { GetStackRequest } from "./service";
import type { CreateStackResponse } from "./service";
import type { CreateStackRequest } from "./service";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";

/**
 * @generated from protobuf service dipstick.stack.v1.StackService
 */
export interface IStackServiceClient {
  /**
   * @generated from protobuf rpc: CreateStack(dipstick.stack.v1.CreateStackRequest) returns (dipstick.stack.v1.CreateStackResponse);
   */
  createStack(
    input: CreateStackRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateStackRequest, CreateStackResponse>;
  /**
   * @generated from protobuf rpc: GetStack(dipstick.stack.v1.GetStackRequest) returns (dipstick.stack.v1.GetStackResponse);
   */
  getStack(
    input: GetStackRequest,
    options?: RpcOptions,
  ): UnaryCall<GetStackRequest, GetStackResponse>;
}
/**
 * @generated from protobuf service dipstick.stack.v1.StackService
 */
export class StackServiceClient implements IStackServiceClient, ServiceInfo {
  typeName = StackService.typeName;
  methods = StackService.methods;
  options = StackService.options;
  constructor(private readonly _transport: RpcTransport) {}
  /**
   * @generated from protobuf rpc: CreateStack(dipstick.stack.v1.CreateStackRequest) returns (dipstick.stack.v1.CreateStackResponse);
   */
  createStack(
    input: CreateStackRequest,
    options?: RpcOptions,
  ): UnaryCall<CreateStackRequest, CreateStackResponse> {
    const method = this.methods[0],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<CreateStackRequest, CreateStackResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
  /**
   * @generated from protobuf rpc: GetStack(dipstick.stack.v1.GetStackRequest) returns (dipstick.stack.v1.GetStackResponse);
   */
  getStack(
    input: GetStackRequest,
    options?: RpcOptions,
  ): UnaryCall<GetStackRequest, GetStackResponse> {
    const method = this.methods[1],
      opt = this._transport.mergeOptions(options);
    return stackIntercept<GetStackRequest, GetStackResponse>(
      "unary",
      this._transport,
      method,
      opt,
      input,
    );
  }
}
