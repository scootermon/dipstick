// @generated
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct A2lSpec {
    #[prost(message, optional, tag="1")]
    pub meta: ::core::option::Option<super::super::core::v1::EntityMeta>,
    #[prost(message, optional, tag="2")]
    pub file: ::core::option::Option<super::super::core::v1::File>,
}
impl ::prost::Name for A2lSpec {
const NAME: &'static str = "A2lSpec";
const PACKAGE: &'static str = "dipstick.xcp.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.xcp.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionSpec {
    #[prost(message, optional, tag="1")]
    pub meta: ::core::option::Option<super::super::core::v1::EntityMeta>,
    #[prost(oneof="session_spec::XcpTransportSpec", tags="2")]
    pub xcp_transport_spec: ::core::option::Option<session_spec::XcpTransportSpec>,
}
/// Nested message and enum types in `SessionSpec`.
pub mod session_spec {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum XcpTransportSpec {
        #[prost(message, tag="2")]
        Can(super::CanTransportSpec),
    }
}
impl ::prost::Name for SessionSpec {
const NAME: &'static str = "SessionSpec";
const PACKAGE: &'static str = "dipstick.xcp.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.xcp.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CanTransportSpec {
    #[prost(message, optional, tag="1")]
    pub bus: ::core::option::Option<super::super::core::v1::EntitySelector>,
    #[prost(message, optional, tag="2")]
    pub client_id: ::core::option::Option<super::super::can::v1::Id>,
    #[prost(message, optional, tag="3")]
    pub server_id: ::core::option::Option<super::super::can::v1::Id>,
}
impl ::prost::Name for CanTransportSpec {
const NAME: &'static str = "CanTransportSpec";
const PACKAGE: &'static str = "dipstick.xcp.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.xcp.v1.{}", Self::NAME)
            }}
/// Encoded file descriptor set for the `dipstick.xcp.v1` package
pub const FILE_DESCRIPTOR_SET: &[u8] = &[
    0x0a, 0x93, 0x04, 0x0a, 0x19, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x78, 0x63,
    0x70, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x32, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
    0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x31, 0x1a,
    0x1d, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76,
    0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
    0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31,
    0x2f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67, 0x0a, 0x07, 0x41,
    0x32, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e,
    0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65,
    0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
    0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63,
    0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04,
    0x66, 0x69, 0x6c, 0x65, 0x42, 0x7d, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x70, 0x73,
    0x74, 0x69, 0x63, 0x6b, 0x2e, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x41, 0x32, 0x6c,
    0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x0f,
    0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x58, 0x63, 0x70, 0x2e, 0x56, 0x31, 0xca,
    0x02, 0x0f, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5c, 0x58, 0x63, 0x70, 0x5c, 0x56,
    0x31, 0xe2, 0x02, 0x1b, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5c, 0x58, 0x63, 0x70,
    0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
    0x02, 0x11, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x3a, 0x3a, 0x58, 0x63, 0x70, 0x3a,
    0x3a, 0x56, 0x31, 0x4a, 0xb8, 0x01, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x09, 0x01, 0x0a, 0x08,
    0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x01,
    0x00, 0x18, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x03, 0x00, 0x27, 0x0a, 0x09, 0x0a,
    0x02, 0x03, 0x01, 0x12, 0x03, 0x04, 0x00, 0x25, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04,
    0x06, 0x00, 0x09, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x06, 0x08, 0x0f,
    0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x07, 0x02, 0x27, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x07, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x07, 0x1e, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02,
    0x00, 0x03, 0x12, 0x03, 0x07, 0x25, 0x26, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12,
    0x03, 0x08, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x08,
    0x02, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x08, 0x18, 0x1c,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x08, 0x1f, 0x20, 0x62, 0x06,
    0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x0a, 0xc5, 0x07, 0x0a, 0x1d, 0x64, 0x69, 0x70, 0x73, 0x74,
    0x69, 0x63, 0x6b, 0x2f, 0x78, 0x63, 0x70, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69,
    0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69,
    0x63, 0x6b, 0x2e, 0x78, 0x63, 0x70, 0x2e, 0x76, 0x31, 0x1a, 0x18, 0x64, 0x69, 0x70, 0x73, 0x74,
    0x69, 0x63, 0x6b, 0x2f, 0x63, 0x61, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x64, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x63, 0x6f,
    0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
    0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70,
    0x65, 0x63, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x1c, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65,
    0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04,
    0x6d, 0x65, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x03, 0x63, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
    0x0b, 0x32, 0x21, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x78, 0x63, 0x70,
    0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
    0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x03, 0x63, 0x61, 0x6e, 0x42, 0x14, 0x0a, 0x12, 0x78,
    0x63, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x70, 0x65,
    0x63, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f,
    0x72, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x03, 0x62, 0x75, 0x73, 0x18, 0x01, 0x20,
    0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63,
    0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c,
    0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x03, 0x62, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x6c,
    0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
    0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
    0x49, 0x64, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x09,
    0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
    0x13, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63, 0x61, 0x6e, 0x2e, 0x76,
    0x31, 0x2e, 0x49, 0x64, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x42, 0x81,
    0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e,
    0x78, 0x63, 0x70, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
    0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02, 0x0f, 0x44,
    0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x58, 0x63, 0x70, 0x2e, 0x56, 0x31, 0xca, 0x02,
    0x0f, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5c, 0x58, 0x63, 0x70, 0x5c, 0x56, 0x31,
    0xe2, 0x02, 0x1b, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5c, 0x58, 0x63, 0x70, 0x5c,
    0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
    0x11, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x3a, 0x3a, 0x58, 0x63, 0x70, 0x3a, 0x3a,
    0x56, 0x31, 0x4a, 0x91, 0x03, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x11, 0x01, 0x0a, 0x08, 0x0a,
    0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x01, 0x00,
    0x18, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x03, 0x00, 0x22, 0x0a, 0x09, 0x0a, 0x02,
    0x03, 0x01, 0x12, 0x03, 0x04, 0x00, 0x27, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x06,
    0x00, 0x0b, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x06, 0x08, 0x13, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x07, 0x02, 0x27, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x07, 0x02, 0x1d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x07, 0x1e, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x07, 0x25, 0x26, 0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x08, 0x00, 0x12, 0x04,
    0x08, 0x02, 0x0a, 0x03, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x08, 0x00, 0x01, 0x12, 0x03, 0x08,
    0x08, 0x1a, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03, 0x09, 0x04, 0x1d, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x09, 0x04, 0x14, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x09, 0x15, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x09, 0x1b, 0x1c, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12,
    0x04, 0x0d, 0x00, 0x11, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x0d, 0x08,
    0x18, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x0e, 0x02, 0x2a, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x0e, 0x02, 0x21, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0e, 0x22, 0x25, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x0e, 0x28, 0x29, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01,
    0x12, 0x03, 0x0f, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03,
    0x0f, 0x02, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0f, 0x15,
    0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x0f, 0x21, 0x22, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x02, 0x12, 0x03, 0x10, 0x02, 0x23, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x02, 0x06, 0x12, 0x03, 0x10, 0x02, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x10, 0x15, 0x1e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x02,
    0x03, 0x12, 0x03, 0x10, 0x21, 0x22, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];
// @@protoc_insertion_point(module)