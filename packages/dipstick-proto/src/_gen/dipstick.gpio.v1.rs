// @generated
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PinSpec {
    #[prost(string, tag="2")]
    pub line_name: ::prost::alloc::string::String,
    #[prost(enumeration="super::super::core::v1::IoDir", tag="3")]
    pub direction: i32,
}
impl ::prost::Name for PinSpec {
const NAME: &'static str = "PinSpec";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PinStatus {
    #[prost(message, optional, tag="2")]
    pub changed_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(enumeration="Level", tag="1")]
    pub logical: i32,
}
impl ::prost::Name for PinStatus {
const NAME: &'static str = "PinStatus";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Level {
    Unspecified = 0,
    Low = 1,
    High = 2,
}
impl Level {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Level::Unspecified => "LEVEL_UNSPECIFIED",
            Level::Low => "LEVEL_LOW",
            Level::High => "LEVEL_HIGH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LEVEL_UNSPECIFIED" => Some(Self::Unspecified),
            "LEVEL_LOW" => Some(Self::Low),
            "LEVEL_HIGH" => Some(Self::High),
            _ => None,
        }
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChipEntity {
    #[prost(message, optional, tag="1")]
    pub meta: ::core::option::Option<super::super::core::v1::EntityMeta>,
    #[prost(message, optional, tag="2")]
    pub spec: ::core::option::Option<ChipSpec>,
    #[prost(message, optional, tag="3")]
    pub status: ::core::option::Option<ChipStatus>,
}
impl ::prost::Name for ChipEntity {
const NAME: &'static str = "ChipEntity";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChipSpec {
    #[prost(map="string, message", tag="2")]
    pub pins: ::std::collections::HashMap<::prost::alloc::string::String, PinSpec>,
    #[prost(oneof="chip_spec::ChipSpecVariant", tags="3")]
    pub chip_spec_variant: ::core::option::Option<chip_spec::ChipSpecVariant>,
}
/// Nested message and enum types in `ChipSpec`.
pub mod chip_spec {
    #[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum ChipSpecVariant {
        #[prost(message, tag="3")]
        Linux(super::LinuxChipSpec),
    }
}
impl ::prost::Name for ChipSpec {
const NAME: &'static str = "ChipSpec";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LinuxChipSpec {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
}
impl ::prost::Name for LinuxChipSpec {
const NAME: &'static str = "LinuxChipSpec";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChipStatus {
    #[prost(map="string, message", tag="2")]
    pub pins: ::std::collections::HashMap<::prost::alloc::string::String, PinStatus>,
}
impl ::prost::Name for ChipStatus {
const NAME: &'static str = "ChipStatus";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateChipRequest {
    #[prost(message, optional, tag="1")]
    pub chip: ::core::option::Option<ChipEntity>,
}
impl ::prost::Name for CreateChipRequest {
const NAME: &'static str = "CreateChipRequest";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateChipResponse {
    #[prost(message, optional, tag="1")]
    pub chip: ::core::option::Option<ChipEntity>,
}
impl ::prost::Name for CreateChipResponse {
const NAME: &'static str = "CreateChipResponse";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChipRequest {
    #[prost(message, optional, tag="1")]
    pub chip: ::core::option::Option<super::super::core::v1::EntitySelector>,
}
impl ::prost::Name for GetChipRequest {
const NAME: &'static str = "GetChipRequest";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChipResponse {
    #[prost(message, optional, tag="1")]
    pub chip: ::core::option::Option<ChipEntity>,
}
impl ::prost::Name for GetChipResponse {
const NAME: &'static str = "GetChipResponse";
const PACKAGE: &'static str = "dipstick.gpio.v1";
fn full_name() -> ::prost::alloc::string::String {
                ::prost::alloc::format!("dipstick.gpio.v1.{}", Self::NAME)
            }}
/// Encoded file descriptor set for the `dipstick.gpio.v1` package
pub const FILE_DESCRIPTOR_SET: &[u8] = &[
    0x0a, 0xeb, 0x07, 0x0a, 0x1a, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x67, 0x70,
    0x69, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
    0x10, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76,
    0x31, 0x1a, 0x20, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65,
    0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
    0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5d, 0x0a, 0x07, 0x50, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12,
    0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
    0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09,
    0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
    0x17, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
    0x76, 0x31, 0x2e, 0x49, 0x6f, 0x44, 0x69, 0x72, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
    0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
    0x12, 0x39, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
    0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
    0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
    0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x41, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x6c,
    0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x64,
    0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
    0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x2a, 0x3d,
    0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x56, 0x45, 0x4c,
    0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
    0x0a, 0x09, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a,
    0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x42, 0x82, 0x01,
    0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67,
    0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x08, 0x50, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
    0x50, 0x01, 0xa2, 0x02, 0x03, 0x44, 0x47, 0x58, 0xaa, 0x02, 0x10, 0x44, 0x69, 0x70, 0x73, 0x74,
    0x69, 0x63, 0x6b, 0x2e, 0x47, 0x70, 0x69, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x44, 0x69,
    0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5c, 0x47, 0x70, 0x69, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02,
    0x1c, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5c, 0x47, 0x70, 0x69, 0x6f, 0x5c, 0x56,
    0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12,
    0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x3a, 0x3a, 0x47, 0x70, 0x69, 0x6f, 0x3a, 0x3a,
    0x56, 0x31, 0x4a, 0xd1, 0x03, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x14, 0x01, 0x0a, 0x08, 0x0a,
    0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x01, 0x00,
    0x19, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x03, 0x00, 0x2a, 0x0a, 0x09, 0x0a, 0x02,
    0x03, 0x01, 0x12, 0x03, 0x04, 0x00, 0x29, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x06,
    0x00, 0x09, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x06, 0x08, 0x0f, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x07, 0x02, 0x17, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x00, 0x05, 0x12, 0x03, 0x07, 0x02, 0x08, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x07, 0x09, 0x12, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x07, 0x15, 0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x01, 0x12, 0x03,
    0x08, 0x02, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06, 0x12, 0x03, 0x08, 0x02,
    0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x08, 0x19, 0x22, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x08, 0x25, 0x26, 0x0a, 0x0a, 0x0a,
    0x02, 0x04, 0x01, 0x12, 0x04, 0x0b, 0x00, 0x0e, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01,
    0x12, 0x03, 0x0b, 0x08, 0x11, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x0c,
    0x02, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x0c, 0x02, 0x1b,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0c, 0x1c, 0x26, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12, 0x03, 0x0c, 0x29, 0x2a, 0x0a, 0x0b, 0x0a, 0x04,
    0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x0d, 0x02, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02,
    0x01, 0x06, 0x12, 0x03, 0x0d, 0x02, 0x07, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01,
    0x12, 0x03, 0x0d, 0x08, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03,
    0x0d, 0x12, 0x13, 0x0a, 0x0a, 0x0a, 0x02, 0x05, 0x00, 0x12, 0x04, 0x10, 0x00, 0x14, 0x01, 0x0a,
    0x0a, 0x0a, 0x03, 0x05, 0x00, 0x01, 0x12, 0x03, 0x10, 0x05, 0x0a, 0x0a, 0x0b, 0x0a, 0x04, 0x05,
    0x00, 0x02, 0x00, 0x12, 0x03, 0x11, 0x02, 0x18, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x11, 0x02, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x00, 0x02, 0x12,
    0x03, 0x11, 0x16, 0x17, 0x0a, 0x0b, 0x0a, 0x04, 0x05, 0x00, 0x02, 0x01, 0x12, 0x03, 0x12, 0x02,
    0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x12, 0x02, 0x0b, 0x0a,
    0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x12, 0x0e, 0x0f, 0x0a, 0x0b, 0x0a,
    0x04, 0x05, 0x00, 0x02, 0x02, 0x12, 0x03, 0x13, 0x02, 0x11, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00,
    0x02, 0x02, 0x01, 0x12, 0x03, 0x13, 0x02, 0x0c, 0x0a, 0x0c, 0x0a, 0x05, 0x05, 0x00, 0x02, 0x02,
    0x02, 0x12, 0x03, 0x13, 0x0f, 0x10, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x0a, 0xfd,
    0x0a, 0x0a, 0x1b, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x67, 0x70, 0x69, 0x6f,
    0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
    0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31,
    0x1a, 0x1d, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
    0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
    0x1a, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x67, 0x70, 0x69, 0x6f, 0x2f, 0x76,
    0x31, 0x2f, 0x70, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x0a,
    0x43, 0x68, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x6d, 0x65,
    0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74,
    0x69, 0x63, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69,
    0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04,
    0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x69, 0x70,
    0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
    0x69, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x34, 0x0a, 0x06,
    0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64,
    0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
    0x43, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
    0x75, 0x73, 0x22, 0xe6, 0x01, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12,
    0x38, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
    0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31,
    0x2e, 0x43, 0x68, 0x69, 0x70, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x50, 0x69, 0x6e, 0x73, 0x45, 0x6e,
    0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
    0x75, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74,
    0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x75,
    0x78, 0x43, 0x68, 0x69, 0x70, 0x53, 0x70, 0x65, 0x63, 0x48, 0x00, 0x52, 0x05, 0x6c, 0x69, 0x6e,
    0x75, 0x78, 0x1a, 0x52, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
    0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
    0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
    0x32, 0x19, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f,
    0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c,
    0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x73,
    0x70, 0x65, 0x63, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x0d, 0x4c,
    0x69, 0x6e, 0x75, 0x78, 0x43, 0x68, 0x69, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04,
    0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
    0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x43, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
    0x3a, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
    0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31,
    0x2e, 0x43, 0x68, 0x69, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x73,
    0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x1a, 0x54, 0x0a, 0x09, 0x50,
    0x69, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
    0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61,
    0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x69, 0x70, 0x73,
    0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x69, 0x6e,
    0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
    0x01, 0x42, 0x83, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69,
    0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x43, 0x68, 0x69, 0x70,
    0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03, 0x44, 0x47, 0x58, 0xaa, 0x02, 0x10,
    0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x47, 0x70, 0x69, 0x6f, 0x2e, 0x56, 0x31,
    0xca, 0x02, 0x10, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5c, 0x47, 0x70, 0x69, 0x6f,
    0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x5c, 0x47,
    0x70, 0x69, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
    0x74, 0x61, 0xea, 0x02, 0x12, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x3a, 0x3a, 0x47,
    0x70, 0x69, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x4a, 0xac, 0x04, 0x0a, 0x06, 0x12, 0x04, 0x00, 0x00,
    0x13, 0x37, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01,
    0x02, 0x12, 0x03, 0x01, 0x00, 0x19, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x00, 0x12, 0x03, 0x03, 0x00,
    0x27, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x04, 0x00, 0x24, 0x0a, 0x0a, 0x0a, 0x02,
    0x04, 0x00, 0x12, 0x04, 0x06, 0x00, 0x0a, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12,
    0x03, 0x06, 0x08, 0x12, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x07, 0x02,
    0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x07, 0x02, 0x1d, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x07, 0x1e, 0x22, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x07, 0x25, 0x26, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x00, 0x02, 0x01, 0x12, 0x03, 0x08, 0x02, 0x14, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01,
    0x06, 0x12, 0x03, 0x08, 0x02, 0x0a, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12,
    0x03, 0x08, 0x0b, 0x0f, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03, 0x08,
    0x12, 0x13, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x09, 0x02, 0x18, 0x0a,
    0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x09, 0x02, 0x0c, 0x0a, 0x0c, 0x0a,
    0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x09, 0x0d, 0x13, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
    0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x09, 0x16, 0x17, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x01, 0x12,
    0x04, 0x0c, 0x00, 0x0f, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x0c, 0x08,
    0x10, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x0d, 0x02, 0x20, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x06, 0x12, 0x03, 0x0d, 0x02, 0x16, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0d, 0x17, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x0d, 0x1e, 0x1f, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x08, 0x00,
    0x12, 0x03, 0x0e, 0x02, 0x36, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x08, 0x00, 0x01, 0x12, 0x03,
    0x0e, 0x08, 0x19, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x01, 0x02, 0x01, 0x12, 0x03, 0x0e, 0x1c, 0x34,
    0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x06, 0x12, 0x03, 0x0e, 0x1c, 0x29, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x01, 0x02, 0x01, 0x01, 0x12, 0x03, 0x0e, 0x2a, 0x2f, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x01, 0x02, 0x01, 0x03, 0x12, 0x03, 0x0e, 0x32, 0x33, 0x0a, 0x09, 0x0a, 0x02, 0x04, 0x02,
    0x12, 0x03, 0x11, 0x00, 0x2a, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x11, 0x08,
    0x15, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x02, 0x02, 0x00, 0x12, 0x03, 0x11, 0x18, 0x28, 0x0a, 0x0c,
    0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x05, 0x12, 0x03, 0x11, 0x18, 0x1e, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x02, 0x02, 0x00, 0x01, 0x12, 0x03, 0x11, 0x1f, 0x23, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02,
    0x02, 0x00, 0x03, 0x12, 0x03, 0x11, 0x26, 0x27, 0x0a, 0x09, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x03,
    0x13, 0x00, 0x37, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x13, 0x08, 0x12, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02, 0x00, 0x12, 0x03, 0x13, 0x15, 0x35, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x03, 0x02, 0x00, 0x06, 0x12, 0x03, 0x13, 0x15, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x13, 0x2c, 0x30, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x13, 0x33, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33, 0x0a, 0xc7,
    0x09, 0x0a, 0x1e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x67, 0x70, 0x69, 0x6f,
    0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
    0x6f, 0x12, 0x10, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f,
    0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x67, 0x70,
    0x69, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
    0x1a, 0x1d, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
    0x76, 0x31, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
    0x45, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71,
    0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
    0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70,
    0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
    0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x22, 0x46, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
    0x43, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04,
    0x63, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x70,
    0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
    0x69, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x22, 0x46,
    0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
    0x12, 0x34, 0x0a, 0x04, 0x63, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
    0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x76,
    0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
    0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x22, 0x43, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69,
    0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x68, 0x69,
    0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69,
    0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x69, 0x70, 0x45,
    0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63, 0x68, 0x69, 0x70, 0x32, 0xb6, 0x01, 0x0a, 0x0b,
    0x47, 0x70, 0x69, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x43,
    0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x70, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x70, 0x73,
    0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
    0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
    0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76,
    0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x12,
    0x20, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e,
    0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
    0x74, 0x1a, 0x21, 0x2e, 0x64, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69,
    0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x69, 0x70, 0x52, 0x65, 0x73, 0x70,
    0x6f, 0x6e, 0x73, 0x65, 0x42, 0x86, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x69, 0x70,
    0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x67, 0x70, 0x69, 0x6f, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x53,
    0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02, 0x03,
    0x44, 0x47, 0x58, 0xaa, 0x02, 0x10, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x2e, 0x47,
    0x70, 0x69, 0x6f, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x10, 0x44, 0x69, 0x70, 0x73, 0x74, 0x69, 0x63,
    0x6b, 0x5c, 0x47, 0x70, 0x69, 0x6f, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x44, 0x69, 0x70, 0x73,
    0x74, 0x69, 0x63, 0x6b, 0x5c, 0x47, 0x70, 0x69, 0x6f, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42,
    0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x44, 0x69, 0x70, 0x73, 0x74,
    0x69, 0x63, 0x6b, 0x3a, 0x3a, 0x47, 0x70, 0x69, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x4a, 0xf0, 0x03,
    0x0a, 0x06, 0x12, 0x04, 0x00, 0x00, 0x12, 0x30, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00,
    0x00, 0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x01, 0x00, 0x19, 0x0a, 0x09, 0x0a, 0x02,
    0x03, 0x00, 0x12, 0x03, 0x03, 0x00, 0x25, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03, 0x04,
    0x00, 0x27, 0x0a, 0x0a, 0x0a, 0x02, 0x06, 0x00, 0x12, 0x04, 0x06, 0x00, 0x0a, 0x01, 0x0a, 0x0a,
    0x0a, 0x03, 0x06, 0x00, 0x01, 0x12, 0x03, 0x06, 0x08, 0x13, 0x0a, 0x0b, 0x0a, 0x04, 0x06, 0x00,
    0x02, 0x00, 0x12, 0x03, 0x07, 0x02, 0x41, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x01,
    0x12, 0x03, 0x07, 0x06, 0x10, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x02, 0x12, 0x03,
    0x07, 0x11, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00, 0x02, 0x00, 0x03, 0x12, 0x03, 0x07, 0x2d,
    0x3f, 0x0a, 0x0b, 0x0a, 0x04, 0x06, 0x00, 0x02, 0x01, 0x12, 0x03, 0x09, 0x02, 0x38, 0x0a, 0x0c,
    0x0a, 0x05, 0x06, 0x00, 0x02, 0x01, 0x01, 0x12, 0x03, 0x09, 0x06, 0x0d, 0x0a, 0x0c, 0x0a, 0x05,
    0x06, 0x00, 0x02, 0x01, 0x02, 0x12, 0x03, 0x09, 0x0e, 0x1c, 0x0a, 0x0c, 0x0a, 0x05, 0x06, 0x00,
    0x02, 0x01, 0x03, 0x12, 0x03, 0x09, 0x27, 0x36, 0x0a, 0x09, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x03,
    0x0c, 0x00, 0x32, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x0c, 0x08, 0x19, 0x0a,
    0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x0c, 0x1c, 0x30, 0x0a, 0x0c, 0x0a, 0x05,
    0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x0c, 0x1c, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
    0x02, 0x00, 0x01, 0x12, 0x03, 0x0c, 0x27, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x00,
    0x03, 0x12, 0x03, 0x0c, 0x2e, 0x2f, 0x0a, 0x09, 0x0a, 0x02, 0x04, 0x01, 0x12, 0x03, 0x0e, 0x00,
    0x33, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x01, 0x01, 0x12, 0x03, 0x0e, 0x08, 0x1a, 0x0a, 0x0b, 0x0a,
    0x04, 0x04, 0x01, 0x02, 0x00, 0x12, 0x03, 0x0e, 0x1d, 0x31, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01,
    0x02, 0x00, 0x06, 0x12, 0x03, 0x0e, 0x1d, 0x27, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00,
    0x01, 0x12, 0x03, 0x0e, 0x28, 0x2c, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x01, 0x02, 0x00, 0x03, 0x12,
    0x03, 0x0e, 0x2f, 0x30, 0x0a, 0x09, 0x0a, 0x02, 0x04, 0x02, 0x12, 0x03, 0x10, 0x00, 0x44, 0x0a,
    0x0a, 0x0a, 0x03, 0x04, 0x02, 0x01, 0x12, 0x03, 0x10, 0x08, 0x16, 0x0a, 0x0b, 0x0a, 0x04, 0x04,
    0x02, 0x02, 0x00, 0x12, 0x03, 0x10, 0x19, 0x42, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00,
    0x06, 0x12, 0x03, 0x10, 0x19, 0x38, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x01, 0x12,
    0x03, 0x10, 0x39, 0x3d, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x02, 0x02, 0x00, 0x03, 0x12, 0x03, 0x10,
    0x40, 0x41, 0x0a, 0x09, 0x0a, 0x02, 0x04, 0x03, 0x12, 0x03, 0x12, 0x00, 0x30, 0x0a, 0x0a, 0x0a,
    0x03, 0x04, 0x03, 0x01, 0x12, 0x03, 0x12, 0x08, 0x17, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x03, 0x02,
    0x00, 0x12, 0x03, 0x12, 0x1a, 0x2e, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x06, 0x12,
    0x03, 0x12, 0x1a, 0x24, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x01, 0x12, 0x03, 0x12,
    0x25, 0x29, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x03, 0x02, 0x00, 0x03, 0x12, 0x03, 0x12, 0x2c, 0x2d,
    0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
];
include!("dipstick.gpio.v1.tonic.rs");
// @@protoc_insertion_point(module)