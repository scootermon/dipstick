syntax = "proto3";
package dipstick.uds.v1;

// UDS service.
service UdsService {
  // Performs a generic request and returns the response.
  rpc Generic(GenericRequest) returns (GenericResponse);
}

// Generic request.
message GenericRequest {
  // Service id.
  ServiceId service_id = 1;
  // Sub function. Only set if the service supports it.
  optional uint32 sub_function = 2;
  // Data.
  bytes data = 3;
}

// Generic response.
message GenericResponse {
  // Service id.
  ServiceId service_id = 1;
  // Error code. UNSPECIFIED if the request was successful.
  ErrorCode error = 2;
  // Sub function. Only set if the service supports it.
  optional uint32 sub_function = 3;
  // Data.
  bytes data = 4;
}

// UDS service id.
enum ServiceId {
  // Unspecified
  SERVICE_ID_UNSPECIFIED = 0;
  // DiagnosticSessionControl
  SERVICE_ID_DSC = 0x10;
  // ECUReset
  SERVICE_ID_ER = 0x11;
  // ClearDiagnosticInformation
  SERVICE_ID_CDTCI = 0x14;
  // ReadDTCInformation
  SERVICE_ID_RDTCI = 0x19;
  // ReadDataByIdentifier
  SERVICE_ID_RDBI = 0x22;
  // ReadMemoryByAddress
  SERVICE_ID_RMBA = 0x23;
  // ReadScalingDataByIdentifier
  SERVICE_ID_RSDBI = 0x24;
  // SecurityAccess
  SERVICE_ID_SA = 0x27;
  // CommunicationControl
  SERVICE_ID_CC = 0x28;
  // WriteDataByIdentifier
  SERVICE_ID_WDBI = 0x2E;
  // WriteMemoryByAddress
  SERVICE_ID_WMBA = 0x2D;
  // RoutineControl
  SERVICE_ID_RC = 0x31;
  // RequestDownload
  SERVICE_ID_RD = 0x34;
  // RequestUpload
  SERVICE_ID_RU = 0x35;
  // TransferData
  SERVICE_ID_TD = 0x36;
  // RequestTransferExit
  SERVICE_ID_RTE = 0x37;
  // RequestFileTransfer
  SERVICE_ID_RFT = 0x38;
  // TesterPresent
  SERVICE_ID_TP = 0x3E;
  // the actual value is 0x7F, but internally we use request ids.
  // 0x3F is reserved by the standard, so this is fine.
  // Negative Response
  SERVICE_ID_NR_SI = 0x3F;
}

// Error code.
enum ErrorCode {
  // positive response
  ERROR_CODE_UNSPECIFIED = 0x00;
  // general reject
  ERROR_CODE_GR = 0x10;
  // service not supported
  ERROR_CODE_SNS = 0x11;
  // sub function not supported
  ERROR_CODE_SFNS = 0x12;
  // incorrect message length or invalid format
  ERROR_CODE_IMLOIF = 0x13;
  // response too long
  ERROR_CODE_RTL = 0x14;
  // busy repeat request
  ERROR_CODE_BRR = 0x21;
  // conditions not correct
  ERROR_CODE_CNC = 0x22;
  // request sequence error
  ERROR_CODE_RSE = 0x24;
  // no response from subnet component
  ERROR_CODE_NRFSC = 0x25;
  // failure prevents execution of requested action
  ERROR_CODE_FPEORA = 0x26;
  // request out of range
  ERROR_CODE_ROOR = 0x31;
  // security access denied
  ERROR_CODE_SAD = 0x33;
  // authentication required
  ERROR_CODE_AR = 0x34;
  // invalid key
  ERROR_CODE_IK = 0x35;
  // exceeded number of attempts
  ERROR_CODE_ENOA = 0x36;
  // required time delay not expired
  ERROR_CODE_RTDNE = 0x37;
  // secure data transmission required
  ERROR_CODE_SDTR = 0x38;
  // secure data transmission not allowed
  ERROR_CODE_SDTNA = 0x39;
  // secure data verification failed
  ERROR_CODE_SDTF = 0x3A;
  // certificate verification failed - invalid time period
  ERROR_CODE_CVFITP = 0x50;
  // certificate verification failed - invalid signature
  ERROR_CODE_CVFISIG = 0x51;
  // certificate verification failed - invalid chain of trust
  ERROR_CODE_CVFICOT = 0x52;
  // certificate verification failed - invalid type
  ERROR_CODE_CVFIT = 0x53;
  // certificate verification failed - invalid format
  ERROR_CODE_CVFIF = 0x54;
  // certificate verification failed - invalid content
  ERROR_CODE_CVFIC = 0x55;
  // certificate verification failed - invalid scope
  ERROR_CODE_CVFIS = 0x56;
  // certificate verification failed - invalid certificate (revoked)
  ERROR_CODE_CVFICR = 0x57;
  // ownership verification failed
  ERROR_CODE_OVF = 0x58;
  // challenge calculation failed
  ERROR_CODE_CCF = 0x59;
  // setting access rights failed
  ERROR_CODE_SARF = 0x5A;
  // session key creation/derivation failed
  ERROR_CODE_SKCDF = 0x5B;
  // configuration data usage failed
  ERROR_CODE_CDUF = 0x5C;
  // de-authentication failed
  ERROR_CODE_DAF = 0x5D;
  // upload download not accepted
  ERROR_CODE_UDNA = 0x70;
  // transfer data suspended
  ERROR_CODE_TDS = 0x71;
  // general programming failure
  ERROR_CODE_GPF = 0x72;
  // wrong block sequence counter
  ERROR_CODE_WBSC = 0x73;
  // request correctly received response pending
  ERROR_CODE_RCRRP = 0x78;
  // sub function not supported in active session
  ERROR_CODE_SFNSIAS = 0x7E;
  // service not supported in active session
  ERROR_CODE_SNSIAS = 0x7F;
}
