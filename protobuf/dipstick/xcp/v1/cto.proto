syntax = "proto3";
package dipstick.xcp.v1;

import "google/protobuf/timestamp.proto";

message CtoCommand {
  google.protobuf.Timestamp timestamp = 1;
  oneof cto_command_content {
    ConnectCommand connect = 2;
    DisconnectCommand disconnect = 3;
    ShortUploadCommand short_upload = 4;
  }
}

message CtoResponse {
  google.protobuf.Timestamp timestamp = 1;
  oneof cto_response_content {
    NegativeResponse negative = 2;
    ConnectResponse connect = 3;
    DisconnectResponse disconnect = 4;
    ShortUploadResponse short_upload = 5;
  }
}

message NegativeResponse {
  Error code = 1;
}

enum Error {
  ERROR_UNSPECIFIED = 0;

  // Command processor synchronization. S0
  ERROR_CMD_SYNCH = 1;
  // Command was not executed. S2
  ERROR_CMD_BUSY = 2;
  // Command rejected because DAQ is running. S2
  ERROR_DAQ_ACTIVE = 3;
  // Command rejected because PGM is running. S2
  ERROR_PGM_ACTIVE = 4;
  // Unknown command or not implemented optional command. S2
  ERROR_CMD_UNKNOWN = 5;
  // Command syntax invalid. S2
  ERROR_CMD_SYNTAX = 6;
  // Command syntax valid but command parameter(s) out of range. S2
  ERROR_OUT_OF_RANGE = 7;
  // The memory location is write protected. S2
  ERROR_WRITE_PROTECTED = 8;
  // The memory location is not accessible. S2
  ERROR_ACCESS_DENIED = 9;
  // Access denied, Seed & Key is required. S2
  ERROR_ACCESS_LOCKED = 10;
  // Selected page not available. S2
  ERROR_PAGE_NOT_VALID = 11;
  // Selected page mode not available. S2
  ERROR_MODE_NOT_VALID = 12;
  // Selected segment not valid. S2
  ERROR_SEGMENT_NOT_VALID = 13;
  // Sequence error. S2
  ERROR_SEQUENCE = 14;
  // DAQ configuration not valid. S2
  ERROR_DAQ_CONFIG = 15;
  // Memory overflow error. S2
  ERROR_MEMORY_OVERFLOW = 16;
  // Generic error. S2
  ERROR_GENERIC = 17;
  // The slave internal program verify routine detects an error. S3
  ERROR_VERIFY = 18;
  // NEW IN 1.1
  // Access to the requested resource is temporary not possible. S3
  ERROR_RESOURCE_TEMPORARY_NOT_ACCESSIBLE = 19;
}

// connect

message ConnectCommand {
  // u8
  uint32 mode = 1;
}

message ConnectResponse {
  Resource resource = 1;
  CommModeBasic comm_mode_basic = 2;
  // u8
  uint32 max_cto = 3;
  // u16
  uint32 max_dto = 4;
  // u8
  uint32 protocol_layer_version = 5;
  // u8
  uint32 transport_layer_version = 6;
}

message Resource {
  bool dbg = 1;
  bool pgm = 2;
  bool stim = 3;
  bool daq = 4;
  bool calpag = 5;
}

enum AddressGranularity {
  ADDRESS_GRANULARITY_UNSPECIFIED = 0;
  ADDRESS_GRANULARITY_BYTE = 1;
  ADDRESS_GRANULARITY_WORD = 2;
  ADDRESS_GRANULARITY_DWORD = 3;
}

enum ByteOrder {
  BYTE_ORDER_UNSPECIFIED = 0;
  BYTE_ORDER_BIG = 1;
  BYTE_ORDER_LITTLE = 2;
}

message CommModeBasic {
  bool optional = 1;
  bool server_block_mode = 2;
  AddressGranularity address_granularity = 3;
  ByteOrder byte_order = 4;
}

// disconnect

message DisconnectCommand {}

message DisconnectResponse {}

// short upload

message ShortUploadCommand {
  // u8
  uint32 length = 2;
  // u32
  uint32 address = 3;
  // u8
  uint32 address_extension = 4;
}

message ShortUploadResponse {
  bytes data = 1;
}
